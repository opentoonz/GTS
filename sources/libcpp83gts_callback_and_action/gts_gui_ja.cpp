// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "gts_gui_ja.h"
/**
 for "Help" --> "About This Application..."
*/
#include <sstream>
/**
 for "Help" --> "About This Application..."
*/
#include <FL/fl_ask.H>
#include "gts_master.h"

void gts_gui::cb_window_main_view_i(Fl_Double_Window*, void*) {
  cl_gts_master.cb_quit();
}
void gts_gui::cb_window_main_view(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_main_view_i(o,v);
}

void gts_gui::cb_1_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_image.open();
}
void gts_gui::cb_1(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_1_i(o,v);
}

void gts_gui::cb_11_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_image.save_as();
}
void gts_gui::cb_11(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_11_i(o,v);
}

void gts_gui::cb__i(Fl_Menu_*, void*) {
  cl_gts_master.cl_config.open();
}
void gts_gui::cb_(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb__i(o,v);
}

void gts_gui::cb_2_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_config.save();
}
void gts_gui::cb_2(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void gts_gui::cb_3_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_config.save_as();
}
void gts_gui::cb_3(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_3_i(o,v);
}

void gts_gui::cb_4_i(Fl_Menu_*, void*) {
  // cl_gts_master.reserve_by_menu(E_ACT_QUIT);
cl_gts_master.cb_quit();
}
void gts_gui::cb_4(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_4_i(o,v);
}

void gts_gui::cb_menite_scan_crop_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_scan_full_area_and_crop();
}
void gts_gui::cb_menite_scan_crop(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_scan_crop_i(o,v);
}

void gts_gui::cb_menite_preview_scan_i(Fl_Menu_*, void*) {
  cl_gts_master.cb_scan_and_preview();
}
void gts_gui::cb_menite_preview_scan(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_preview_scan_i(o,v);
}

void gts_gui::cb_menite_scan_save_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_scan_and_save.cb_start();
}
void gts_gui::cb_menite_scan_save(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_scan_save_i(o,v);
}

void gts_gui::cb_21_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_trace_files.cb_start();
}
void gts_gui::cb_21(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_21_i(o,v);
}

void gts_gui::cb_5_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_trace_files.cb_rename();
}
void gts_gui::cb_5(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_5_i(o,v);
}

void gts_gui::cb_6_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_trace_files.cb_renumber();
}
void gts_gui::cb_6(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_6_i(o,v);
}

void gts_gui::cb_menite_area_and_rot90_i(Fl_Menu_*, void*) {
  if (menite_area_and_rot90->value()) {
 window_main_view->show();/* Need for Minimize */
 window_area_and_rot90->show();
} else {
 window_area_and_rot90->hide();
};
}
void gts_gui::cb_menite_area_and_rot90(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_area_and_rot90_i(o,v);
}

void gts_gui::cb_menite_pixel_type_and_bright_i(Fl_Menu_*, void*) {
  if (menite_pixel_type_and_bright->value()) {
 window_main_view->show();/* Need for Minimize */
 window_pixel_type_and_bright->show();
} else {
 window_pixel_type_and_bright->hide();
};
}
void gts_gui::cb_menite_pixel_type_and_bright(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_pixel_type_and_bright_i(o,v);
}

void gts_gui::cb_menite_number_i(Fl_Menu_*, void*) {
  if (menite_number->value()) {
 window_main_view->show();/* Need for Minimize */
 window_number->show();
} else {
 window_number->hide();
};
}
void gts_gui::cb_menite_number(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_number_i(o,v);
}

void gts_gui::cb_menite_scan_and_save_i(Fl_Menu_*, void*) {
  if (menite_scan_and_save->value()) {
 window_main_view->show();/* Need for Minimize */
 window_scan_and_save->show();
} else {
 window_scan_and_save->hide();
};
}
void gts_gui::cb_menite_scan_and_save(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_scan_and_save_i(o,v);
}

void gts_gui::cb_menite_trace_files_i(Fl_Menu_*, void*) {
  if (menite_trace_files->value()) {
 window_main_view->show();/* Need for Minimize */
 window_trace_files->show();
} else {
 window_trace_files->hide();
};
}
void gts_gui::cb_menite_trace_files(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_trace_files_i(o,v);
}

void gts_gui::cb_menite_trace_params_i(Fl_Menu_*, void*) {
  if (menite_trace_params->value()) {
 window_main_view->show();/* Need for Minimize */
 window_trace_params->show();
} else {
 window_trace_params->hide();
};
}
void gts_gui::cb_menite_trace_params(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_trace_params_i(o,v);
}

void gts_gui::cb_menite_trace_hsv_view_i(Fl_Menu_*, void*) {
  if (menite_trace_hsv_view->value()) {
 window_main_view->show();/* Need for Minimize */
 window_trace_hsv_view->show();
} else {
 window_trace_hsv_view->hide();
};
}
void gts_gui::cb_menite_trace_hsv_view(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_trace_hsv_view_i(o,v);
}

void gts_gui::cb_menite_trace_hue_minmax_i(Fl_Menu_*, void*) {
  if (menite_trace_hue_minmax->value()) {
 cl_gts_master.cl_trace_params.cb_hue_minmax_init_editor(
  cl_gts_master.cl_trace_params.get_hue_minmax_editing_number()
 );
 window_main_view->show();/* Need for Minimize */
 window_trace_hue_minmax->show();
} else {
 window_trace_hue_minmax->hide();
};
}
void gts_gui::cb_menite_trace_hue_minmax(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_trace_hue_minmax_i(o,v);
}

void gts_gui::cb_menite_trace_batch_i(Fl_Menu_*, void*) {
  if (menite_trace_batch->value()) {
 window_main_view->show();/* Need for Minimize */
 window_trace_batch->show();
} else {
 window_trace_batch->hide();
};
}
void gts_gui::cb_menite_trace_batch(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_trace_batch_i(o,v);
}

void gts_gui::cb_7_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_ZOOM_IN_TWICE_AT_CEN);
}
void gts_gui::cb_7(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_7_i(o,v);
}

void gts_gui::cb_8_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_ZOOM_OUT_HALF_AT_CEN);
}
void gts_gui::cb_8(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_8_i(o,v);
}

void gts_gui::cb_9_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_ZOOM_IN_TWICE_AT_POS);
}
void gts_gui::cb_9(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_9_i(o,v);
}

void gts_gui::cb_a_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_ZOOM_OUT_HALF_AT_POS);
}
void gts_gui::cb_a(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_a_i(o,v);
}

void gts_gui::cb_b_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_ZOOM_E01);
}
void gts_gui::cb_b(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_b_i(o,v);
}

void gts_gui::cb_c_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_ALL_VIEW);
}
void gts_gui::cb_c(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_c_i(o,v);
}

void gts_gui::cb_d_i(Fl_Menu_*, void*) {
  if (cl_gts_master.cl_number.selected_prev_frame()) {
    cl_gts_master.cb_number_read_and_trace_and_preview();
};
}
void gts_gui::cb_d(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_d_i(o,v);
}

void gts_gui::cb_e_i(Fl_Menu_*, void*) {
  if (cl_gts_master.cl_number.selected_next_frame()) {
    cl_gts_master.cb_number_read_and_trace_and_preview();
};
}
void gts_gui::cb_e(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_e_i(o,v);
}

void gts_gui::cb_menite_wview_main_i(Fl_Menu_*, void*) {
  if (cl_gts_master.check_change_wview()) {
	cl_gts_master.cb_change_wview_main();
}
else {
	menite_wview_main->setonly();
};
}
void gts_gui::cb_menite_wview_main(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_wview_main_i(o,v);
}

void gts_gui::cb_menite_wview_sub_i(Fl_Menu_*, void*) {
  if (cl_gts_master.check_change_wview()) {
	cl_gts_master.cb_change_wview_sub();
}
else {
	menite_wview_main->setonly();
};
}
void gts_gui::cb_menite_wview_sub(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_wview_sub_i(o,v);
}

void gts_gui::cb_menite_wview_lr_i(Fl_Menu_*, void*) {
  if (cl_gts_master.check_change_wview()) {
	cl_gts_master.cb_change_wview_lr();
}
else {
	menite_wview_main->setonly();
};
}
void gts_gui::cb_menite_wview_lr(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_wview_lr_i(o,v);
}

void gts_gui::cb_menite_wview_ud_i(Fl_Menu_*, void*) {
  if (cl_gts_master.check_change_wview()) {
	cl_gts_master.cb_change_wview_ud();
}
else {
	menite_wview_main->setonly();
};
}
void gts_gui::cb_menite_wview_ud(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_wview_ud_i(o,v);
}

void gts_gui::cb_FullColor_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_RGB_TO_RGB);
}
void gts_gui::cb_FullColor(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_FullColor_i(o,v);
}

void gts_gui::cb_Red_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_RED_TO_RED);
}
void gts_gui::cb_Red(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Red_i(o,v);
}

void gts_gui::cb_Green_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_GRE_TO_GRE);
}
void gts_gui::cb_Green(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Green_i(o,v);
}

void gts_gui::cb_Blue_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_BLU_TO_BLU);
}
void gts_gui::cb_Blue(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Blue_i(o,v);
}

void gts_gui::cb_Red1_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_RED_TO_GRAY);
}
void gts_gui::cb_Red1(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Red1_i(o,v);
}

void gts_gui::cb_Green1_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_GRE_TO_GRAY);
}
void gts_gui::cb_Green1(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Green1_i(o,v);
}

void gts_gui::cb_Blue1_i(Fl_Menu_*, void*) {
  cl_gts_master.reserve_by_menu(E_ACT_CHANNEL_BLU_TO_GRAY);
}
void gts_gui::cb_Blue1(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Blue1_i(o,v);
}

void gts_gui::cb_menite_help_about_i(Fl_Menu_*, void*) {
  std::ostringstream ost;
ost
<< cl_gts_master.cp_release_name()
<< '\n' << " Version:" << cl_gts_master.cp_release_number()
<< '\n' << " Date:" << cl_gts_master.cp_release_date()
<< '\n'
<< '\n' << cl_gts_master.cp_release_name()
<< " is based in part on the work of the FLTK project (http://www.fltk.org)."
<< '\n'
<< '\n' << "GL_Vender:" << glGetString(GL_VENDOR)	// already showed Fl_Gl_Window
<< '\n' << "GL_Renderer:" << glGetString(GL_RENDERER)	// already showed Fl_Gl_Window
<< '\n' << "GL_Version:" << glGetString(GL_VERSION)	// already showed Fl_Gl_Window
<< '\n' << "ScannerType:" << cl_gts_master.cl_iip_scan.get_cp_machine_type()
<< '\n' << "ScannerMaxWidth(cm):" << cl_gts_gui.valout_scanner_size_cm_w->value()
<< '\n' << "ScannerMaxHeight(cm):" << cl_gts_gui.valout_scanner_size_cm_h->value()
;
fl_message( ost.str().c_str() );
}
void gts_gui::cb_menite_help_about(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_help_about_i(o,v);
}

Fl_Menu_Item gts_gui::menu_[] = {
 {"\343\203\225\343\202\241\343\202\244\343\203\253", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\224\273\345\203\217 \351\226\213\343\201\217(1\346\236\232)...", 0x4006f,  (Fl_Callback*)gts_gui::cb_1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\224\273\345\203\217 \345\210\245\345\220\215\343\201\247\344\277\235\
\345\255\230(\345\207\246\347\220\206\343\201\233\343\201\232""1\346\236\232).\
..", 0x50073,  (Fl_Callback*)gts_gui::cb_11, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\350\250\255\345\256\232 \345\206\215\347\217\276...", 0x8006f,  (Fl_Callback*)gts_gui::cb_, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\350\250\255\345\256\232 \344\277\235\345\255\230", 0x80073,  (Fl_Callback*)gts_gui::cb_2, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\350\250\255\345\256\232 \345\210\245\345\220\215\343\201\247\344\277\235\
\345\255\230...", 0x90073,  (Fl_Callback*)gts_gui::cb_3, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\265\202\344\272\206", 0x40071,  (Fl_Callback*)gts_gui::cb_4, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"\345\256\237\350\241\214", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\346\234\200\345\244\247\343\202\271\343\202\255\343\203\243\343\203\263(\
\347\257\204\345\233\262\347\267\250\351\233\206)", 0,  (Fl_Callback*)gts_gui::cb_menite_scan_crop, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\242\272\350\252\215\343\202\271\343\202\255\343\203\243\343\203\263", 0x70,  (Fl_Callback*)gts_gui::cb_menite_preview_scan, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\351\200\243\347\225\252\343\202\271\343\202\255\343\203\243\343\203\263\343\
\201\250\344\277\235\345\255\230\351\226\213\345\247\213", 0xff0d,  (Fl_Callback*)gts_gui::cb_menite_scan_save, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\351\200\243\347\225\252\343\203\225\343\202\241\343\202\244\343\203\253""2\
\345\200\244\345\214\226", 0x54,  (Fl_Callback*)gts_gui::cb_21, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\203\252\343\203\215\343\203\274\343\203\240", 0,  (Fl_Callback*)gts_gui::cb_5, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\203\252\343\203\212\343\203\263\343\203\220\343\203\274", 0,  (Fl_Callback*)gts_gui::cb_6, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"\343\202\246\343\202\244\343\203\263\343\203\211\343\202\246", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\257\204\345\233\262\343\201\250\346\226\271\345\220\221", 0xffbe,  (Fl_Callback*)gts_gui::cb_menite_area_and_rot90, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\224\273\345\203\217\343\202\277\343\202\244\343\203\227\343\201\250\346\
\230\216\343\202\213\343\201\225", 0xffbf,  (Fl_Callback*)gts_gui::cb_menite_pixel_type_and_bright, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\345\256\237\350\241\214\347\225\252\345\217\267", 0xffc0,  (Fl_Callback*)gts_gui::cb_menite_number, 0, 130, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\351\200\243\347\225\252\343\202\271\343\202\255\343\203\243\343\203\263\343\
\201\250\344\277\235\345\255\230", 0xffc1,  (Fl_Callback*)gts_gui::cb_menite_scan_and_save, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\351\200\243\347\225\252\343\203\225\343\202\241\343\202\244\343\203\253""2\
\345\200\244\345\214\226", 0xffc2,  (Fl_Callback*)gts_gui::cb_menite_trace_files, 0, 130, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2\345\200\244\345\214\226\350\252\277\346\225\264", 0xffc3,  (Fl_Callback*)gts_gui::cb_menite_trace_params, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2\345\200\244\345\214\226HSV\350\211\262\347\253\213\344\275\223", 0xffc4,  (Fl_Callback*)gts_gui::cb_menite_trace_hsv_view, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2\345\200\244\345\214\226\350\211\262\347\233\270\347\257\204\345\233\262", 0,  (Fl_Callback*)gts_gui::cb_menite_trace_hue_minmax, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2\345\200\244\345\214\226\343\203\220\343\203\203\343\203\201", 0,  (Fl_Callback*)gts_gui::cb_menite_trace_batch, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Select SANE device", 0,  0, 0, 16, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"\350\241\250\347\244\272", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\202\272\343\203\274\343\203\240", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\224\273\351\235\242\344\270\255\345\277\203\343\201\213\343\202\211\346\
\213\241\345\244\247", 0x7a,  (Fl_Callback*)gts_gui::cb_7, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\224\273\351\235\242\344\270\255\345\277\203\343\201\213\343\202\211\347\
\270\256\345\260\217", 0x78,  (Fl_Callback*)gts_gui::cb_8, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\202\253\343\203\274\343\202\275\343\203\253\344\275\215\347\275\256\343\
\201\213\343\202\211\346\213\241\345\244\247", 0x1007a,  (Fl_Callback*)gts_gui::cb_9, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\202\253\343\203\274\343\202\275\343\203\253\344\275\215\347\275\256\343\
\201\213\343\202\211\347\270\256\345\260\217", 0x10078,  (Fl_Callback*)gts_gui::cb_a, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\203\224\343\202\257\343\202\273\343\203\253\347\255\211\345\200\215", 0x6e,  (Fl_Callback*)gts_gui::cb_b, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\345\205\250\344\275\223\350\241\250\347\244\272", 0x6d,  (Fl_Callback*)gts_gui::cb_c, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"\343\203\225\343\203\254\343\203\274\343\203\240", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\345\276\252\347\222\260", 0,  0, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\351\200\206\351\200\201\343\202\212", 0xff52,  (Fl_Callback*)gts_gui::cb_d, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\351\240\206\351\200\201\343\202\212", 0xff54,  (Fl_Callback*)gts_gui::cb_e, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"2\345\200\244\345\214\226", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\202\271\343\202\255\343\203\243\343\203\263\347\224\273\345\203\217", 0xffc6,  (Fl_Callback*)gts_gui::cb_menite_wview_main, 0, 12, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"2\345\200\244\345\214\226\347\224\273\345\203\217", 0xffc7,  (Fl_Callback*)gts_gui::cb_menite_wview_sub, 0, 8, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\345\267\246\345\217\263\345\210\206\345\211\262", 0xffc8,  (Fl_Callback*)gts_gui::cb_menite_wview_lr, 0, 8, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\344\270\212\344\270\213\345\210\206\345\211\262", 0xffc9,  (Fl_Callback*)gts_gui::cb_menite_wview_ud, 0, 8, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0},
 {"Channels", 0,  0, 0, 80, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"FullColor", 0,  (Fl_Callback*)gts_gui::cb_FullColor, 0, 128, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Red", 0,  (Fl_Callback*)gts_gui::cb_Red, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Green", 0,  (Fl_Callback*)gts_gui::cb_Green, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Blue", 0,  (Fl_Callback*)gts_gui::cb_Blue, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Red to grayscale", 0,  (Fl_Callback*)gts_gui::cb_Red1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Green to grayscale", 0,  (Fl_Callback*)gts_gui::cb_Green1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Blue to grayscale", 0,  (Fl_Callback*)gts_gui::cb_Blue1, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"\343\203\230\343\203\253\343\203\227", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\343\201\223\343\201\256\343\202\242\343\203\227\343\203\252\343\201\253\343\
\201\244\343\201\204\343\201\246...", 0,  (Fl_Callback*)gts_gui::cb_menite_help_about, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* gts_gui::menite_scan_crop = gts_gui::menu_ + 9;
Fl_Menu_Item* gts_gui::menite_preview_scan = gts_gui::menu_ + 10;
Fl_Menu_Item* gts_gui::menite_scan_save = gts_gui::menu_ + 11;
Fl_Menu_Item* gts_gui::menite_area_and_rot90 = gts_gui::menu_ + 17;
Fl_Menu_Item* gts_gui::menite_pixel_type_and_bright = gts_gui::menu_ + 18;
Fl_Menu_Item* gts_gui::menite_number = gts_gui::menu_ + 19;
Fl_Menu_Item* gts_gui::menite_scan_and_save = gts_gui::menu_ + 20;
Fl_Menu_Item* gts_gui::menite_trace_files = gts_gui::menu_ + 21;
Fl_Menu_Item* gts_gui::menite_trace_params = gts_gui::menu_ + 22;
Fl_Menu_Item* gts_gui::menite_trace_hsv_view = gts_gui::menu_ + 23;
Fl_Menu_Item* gts_gui::menite_trace_hue_minmax = gts_gui::menu_ + 24;
Fl_Menu_Item* gts_gui::menite_trace_batch = gts_gui::menu_ + 25;
Fl_Menu_Item* gts_gui::menite_sane_device = gts_gui::menu_ + 26;
Fl_Menu_Item* gts_gui::menite_frame_cyclic = gts_gui::menu_ + 38;
Fl_Menu_Item* gts_gui::menite_wview_main = gts_gui::menu_ + 43;
Fl_Menu_Item* gts_gui::menite_wview_sub = gts_gui::menu_ + 44;
Fl_Menu_Item* gts_gui::menite_wview_lr = gts_gui::menu_ + 45;
Fl_Menu_Item* gts_gui::menite_wview_ud = gts_gui::menu_ + 46;
Fl_Menu_Item* gts_gui::menite_help_about = gts_gui::menu_ + 59;

void gts_gui::cb_scrbar_view_x_i(Fl_Scrollbar* o, void*) {
  cl_gts_master.reserve_by_scroll_x( o->value() );
}
void gts_gui::cb_scrbar_view_x(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_scrbar_view_x_i(o,v);
}

void gts_gui::cb_scrbar_view_y_i(Fl_Scrollbar* o, void*) {
  cl_gts_master.reserve_by_scroll_y( o->value() );
}
void gts_gui::cb_scrbar_view_y(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_scrbar_view_y_i(o,v);
}

void gts_gui::cb_button_rescan_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_rescan();
}
void gts_gui::cb_button_rescan(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_button_rescan_i(o,v);
}

void gts_gui::cb_Enter_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_next();
}
void gts_gui::cb_Enter(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Enter_i(o,v);
}

void gts_gui::cb_Esc_i(Fl_Button*, void*) {
  cl_gts_gui.window_next_scan_non_modal->position(
cl_gts_gui.window_next_scan->x(),
cl_gts_gui.window_next_scan->y()
);
cl_gts_gui.window_next_scan->hide();
}
void gts_gui::cb_Esc(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Esc_i(o,v);
}

void gts_gui::cb_window_next_scan_non_modal_i(Fl_Double_Window*, void*) {
  cl_gts_master.cl_scan_and_save.cb_cancel();
cl_gts_gui.window_next_scan->position(
cl_gts_gui.window_next_scan_non_modal->x(),
cl_gts_gui.window_next_scan_non_modal->y()
);
cl_gts_gui.window_next_scan_non_modal->hide();
}
void gts_gui::cb_window_next_scan_non_modal(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_next_scan_non_modal_i(o,v);
}

void gts_gui::cb_button_next_save_non_modal_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_save(true);
}
void gts_gui::cb_button_next_save_non_modal(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_button_next_save_non_modal_i(o,v);
}

void gts_gui::cb_Esc1_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_cancel();
cl_gts_gui.window_next_scan->position(
cl_gts_gui.window_next_scan_non_modal->x(),
cl_gts_gui.window_next_scan_non_modal->y()
);
cl_gts_gui.window_next_scan_non_modal->hide();
}
void gts_gui::cb_Esc1(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_Esc1_i(o,v);
}

void gts_gui::cb_window_area_and_rot90_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_area_and_rot90->hide();
cl_gts_gui.menite_area_and_rot90->clear();
}
void gts_gui::cb_window_area_and_rot90(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_area_and_rot90_i(o,v);
}

void gts_gui::cb_button_area_and_rot90_i(fltk_button_area_and_rot90*, void*) {
  cl_gts_master.cl_config.open_only_area_and_rot90();
}
void gts_gui::cb_button_area_and_rot90(fltk_button_area_and_rot90* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_button_area_and_rot90_i(o,v);
}

void gts_gui::cb_valinp_area_reso_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_reso();
}
void gts_gui::cb_valinp_area_reso(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_valinp_area_reso_i(o,v);
}

void gts_gui::cb_choice_rot90_i(Fl_Choice*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_rotate_per_90_when_scan();
}
void gts_gui::cb_choice_rot90(Fl_Choice* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_choice_rot90_i(o,v);
}

Fl_Menu_Item gts_gui::menu_choice_rot90[] = {
 {"-90", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"0", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"90", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"180", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void gts_gui::cb_button_scan_crop_i(Fl_Button*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_scan_full_area_and_crop();
}
void gts_gui::cb_button_scan_crop(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_button_scan_crop_i(o,v);
}

void gts_gui::cb_valinp_area_offset_cm_x_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_offset_cm_x();
}
void gts_gui::cb_valinp_area_offset_cm_x(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_area_offset_cm_x_i(o,v);
}

void gts_gui::cb_valinp_area_offset_cm_y_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_offset_cm_y();
}
void gts_gui::cb_valinp_area_offset_cm_y(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_area_offset_cm_y_i(o,v);
}

void gts_gui::cb_valinp_area_size_cm_w_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_size_cm_w();
}
void gts_gui::cb_valinp_area_size_cm_w(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_area_size_cm_w_i(o,v);
}

void gts_gui::cb_valinp_area_size_cm_h_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_size_cm_h();
}
void gts_gui::cb_valinp_area_size_cm_h(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_area_size_cm_h_i(o,v);
}

void gts_gui::cb_valinp_area_size_pixel_w_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_size_pixel_w();
}
void gts_gui::cb_valinp_area_size_pixel_w(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_area_size_pixel_w_i(o,v);
}

void gts_gui::cb_valinp_area_size_pixel_h_i(Fl_Value_Input*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_size_pixel_h();
}
void gts_gui::cb_valinp_area_size_pixel_h(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_area_size_pixel_h_i(o,v);
}

void gts_gui::cb_f_i(Fl_Button* o, void*) {
  cl_gts_master.cl_area_and_rot90.cb_dialog_set_aspect_ratio(
	window_area_and_rot90 ,o
);
}
void gts_gui::cb_f(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_f_i(o,v);
}

void gts_gui::cb_10_i(Fl_Button*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_area_set_max();
}
void gts_gui::cb_10(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_10_i(o,v);
}

void gts_gui::cb_window_pixel_type_and_bright_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_pixel_type_and_bright->hide();
cl_gts_gui.menite_pixel_type_and_bright->clear();
}
void gts_gui::cb_window_pixel_type_and_bright(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_pixel_type_and_bright_i(o,v);
}

void gts_gui::cb_button_pixel_type_and_bright_i(fltk_button_pixel_type_and_bright*, void*) {
  cl_gts_master.cl_config.open_only_pixel_type_and_bright();
}
void gts_gui::cb_button_pixel_type_and_bright(fltk_button_pixel_type_and_bright* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_button_pixel_type_and_bright_i(o,v);
}

void gts_gui::cb_choice_pixel_type_i(Fl_Choice*, void*) {
  cl_gts_master.cl_pixel_type_and_bright.cb_choice_pixel_type_menu();
cl_gts_master.cl_scan_and_save.set_gui_ext_list();
}
void gts_gui::cb_choice_pixel_type(Fl_Choice* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_choice_pixel_type_i(o,v);
}

Fl_Menu_Item gts_gui::menu_choice_pixel_type[] = {
 {"\347\231\275\351\273\222""2\351\232\216\350\252\277", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"8\343\203\223\343\203\203\343\203\210\343\202\260\343\203\254\343\203\274", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\357\274\222\357\274\224\343\203\223\343\203\203\343\203\210\343\202\253\343\
\203\251\343\203\274", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void gts_gui::cb_valinp_bw_threshold_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_bw_threshold)->value(o->value());
}
void gts_gui::cb_valinp_bw_threshold(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_bw_threshold_i(o,v);
}

void gts_gui::cb_scrbar_bw_threshold_i(Fl_Scrollbar* o, void*) {
  valinp_bw_threshold->value(o->value());
}
void gts_gui::cb_scrbar_bw_threshold(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_bw_threshold_i(o,v);
}

void gts_gui::cb_valinp_grayscale_brightness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_grayscale_brightness)->value(o->value());
}
void gts_gui::cb_valinp_grayscale_brightness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_grayscale_brightness_i(o,v);
}

void gts_gui::cb_scrbar_grayscale_brightness_i(Fl_Scrollbar* o, void*) {
  valinp_grayscale_brightness->value(o->value());
}
void gts_gui::cb_scrbar_grayscale_brightness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_grayscale_brightness_i(o,v);
}

void gts_gui::cb_valinp_grayscale_contrast_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_grayscale_contrast)->value(o->value());
}
void gts_gui::cb_valinp_grayscale_contrast(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_grayscale_contrast_i(o,v);
}

void gts_gui::cb_scrbar_grayscale_contrast_i(Fl_Scrollbar* o, void*) {
  valinp_grayscale_contrast->value(o->value());
}
void gts_gui::cb_scrbar_grayscale_contrast(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_grayscale_contrast_i(o,v);
}

void gts_gui::cb_valinp_grayscale_gamma_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_grayscale_gamma)->value(o->value());
}
void gts_gui::cb_valinp_grayscale_gamma(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_grayscale_gamma_i(o,v);
}

void gts_gui::cb_scrbar_grayscale_gamma_i(Fl_Scrollbar* o, void*) {
  valinp_grayscale_gamma->value(((Fl_Valuator *)o)->value());
}
void gts_gui::cb_scrbar_grayscale_gamma(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_grayscale_gamma_i(o,v);
}

void gts_gui::cb_valinp_rgb_brightness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_rgb_brightness)->value(o->value());
}
void gts_gui::cb_valinp_rgb_brightness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_rgb_brightness_i(o,v);
}

void gts_gui::cb_scrbar_rgb_brightness_i(Fl_Scrollbar* o, void*) {
  valinp_rgb_brightness->value(o->value());
}
void gts_gui::cb_scrbar_rgb_brightness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_rgb_brightness_i(o,v);
}

void gts_gui::cb_valinp_rgb_contrast_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_rgb_contrast)->value(o->value());
}
void gts_gui::cb_valinp_rgb_contrast(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_rgb_contrast_i(o,v);
}

void gts_gui::cb_scrbar_rgb_contrast_i(Fl_Scrollbar* o, void*) {
  valinp_rgb_contrast->value(o->value());
}
void gts_gui::cb_scrbar_rgb_contrast(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_rgb_contrast_i(o,v);
}

void gts_gui::cb_valinp_rgb_gamma_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_rgb_gamma)->value(o->value());
}
void gts_gui::cb_valinp_rgb_gamma(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_rgb_gamma_i(o,v);
}

void gts_gui::cb_scrbar_rgb_gamma_i(Fl_Scrollbar* o, void*) {
  valinp_rgb_gamma->value(((Fl_Valuator *)o)->value());
}
void gts_gui::cb_scrbar_rgb_gamma(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_rgb_gamma_i(o,v);
}

void gts_gui::cb_button_preview_scan_i(Fl_Button*, void*) {
  cl_gts_master.cb_scan_and_preview();
}
void gts_gui::cb_button_preview_scan(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_button_preview_scan_i(o,v);
}

void gts_gui::cb_window_scan_and_save_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_scan_and_save->hide();
cl_gts_gui.menite_scan_and_save->clear();
}
void gts_gui::cb_window_scan_and_save(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_scan_and_save_i(o,v);
}

void gts_gui::cb_chkbtn_scan_filter_trace_sw_i(Fl_Check_Button* o, void*) {
  cl_gts_master.cb_rot_trace_enoise_preview();
if (o->value()) {
	o->box(FL_SHADOW_BOX);
	o->redraw();
}
else {
	o->box(FL_FLAT_BOX);
	o->redraw();
};
}
void gts_gui::cb_chkbtn_scan_filter_trace_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chkbtn_scan_filter_trace_sw_i(o,v);
}

void gts_gui::cb_chkbtn_scan_filter_erase_dot_noise_sw_i(Fl_Check_Button* o, void*) {
  cl_gts_master.cb_rot_trace_enoise_preview();
if (o->value()) {
	o->box(FL_SHADOW_BOX);
	o->redraw();
}
else {
	o->box(FL_FLAT_BOX);
	o->redraw();
};
}
void gts_gui::cb_chkbtn_scan_filter_erase_dot_noise_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chkbtn_scan_filter_erase_dot_noise_sw_i(o,v);
}

void gts_gui::cb_filinp_scan_save_dir_path_i(Fl_File_Input*, void*) {
  cl_gts_master.cl_scan_and_save.cb_check_existing_saved_file();
}
void gts_gui::cb_filinp_scan_save_dir_path(Fl_File_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_filinp_scan_save_dir_path_i(o,v);
}

void gts_gui::cb_12_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_browse_save_folder();
cl_gts_master.cl_scan_and_save.cb_check_existing_saved_file();
}
void gts_gui::cb_12(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_12_i(o,v);
}

void gts_gui::cb_strinp_scan_save_file_head_i(Fl_Input* o, void*) {
  cl_gts_master.cl_scan_and_save.cb_check_existing_saved_file();
if (cl_gts_master.cl_number.is_scan()) {
	output_number_file_head_name->value( o->value() );
};
}
void gts_gui::cb_strinp_scan_save_file_head(Fl_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_strinp_scan_save_file_head_i(o,v);
}

void gts_gui::cb_output_scan_save_number_format_i(Fl_Output* o, void*) {
  cl_gts_master.cl_set_number_format.cb_dialog_set_number_format(
	window_scan_and_save ,o
);
}
void gts_gui::cb_output_scan_save_number_format(Fl_Output* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_output_scan_save_number_format_i(o,v);
}

void gts_gui::cb_choice_scan_save_image_format_i(Fl_Choice*, void*) {
  cl_gts_master.cl_scan_and_save.cb_check_existing_saved_file();
}
void gts_gui::cb_choice_scan_save_image_format(Fl_Choice* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_scan_save_image_format_i(o,v);
}

void gts_gui::cb_choice_scan_num_continue_type_i(Fl_Choice* o, void*) {
  cl_gts_master.cl_scan_and_save.cb_change_num_continue_type(o->value());
}
void gts_gui::cb_choice_scan_num_continue_type(Fl_Choice* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_scan_num_continue_type_i(o,v);
}

Fl_Menu_Item gts_gui::menu_choice_scan_num_continue_type[] = {
 {"\347\265\202\347\225\252\345\217\267", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\347\225\252\345\217\267\351\200\201", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item gts_gui::menu_choice_scan_num_endless_direction[] = {
 {"+1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"-1", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void gts_gui::cb_13_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_set_number();
cl_gts_master.cl_scan_and_save.cb_check_existing_saved_file();
}
void gts_gui::cb_13(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_13_i(o,v);
}

void gts_gui::cb_button_scan_save_i(Fl_Button*, void*) {
  cl_gts_master.cl_scan_and_save.cb_start();
}
void gts_gui::cb_button_scan_save(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_button_scan_save_i(o,v);
}

void gts_gui::cb_window_trace_files_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_trace_files->hide();
cl_gts_gui.menite_trace_files->clear();
}
void gts_gui::cb_window_trace_files(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_trace_files_i(o,v);
}

void gts_gui::cb_14_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_files.cb_browse_open_file();
}
void gts_gui::cb_14(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_14_i(o,v);
}

void gts_gui::cb_15_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_files.cb_rename();
}
void gts_gui::cb_15(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_15_i(o,v);
}

void gts_gui::cb_16_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_files.cb_renumber();
}
void gts_gui::cb_16(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_16_i(o,v);
}

void gts_gui::cb_chkbtn_trace_filter_trace_sw_i(Fl_Check_Button* o, void*) {
  cl_gts_master.cb_rot_trace_enoise_preview();
if (o->value()) {
	o->box(FL_SHADOW_BOX);
	o->redraw();
}
else {
	o->box(FL_FLAT_BOX);
	o->redraw();
};
}
void gts_gui::cb_chkbtn_trace_filter_trace_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chkbtn_trace_filter_trace_sw_i(o,v);
}

void gts_gui::cb_chkbtn_trace_filter_erase_dot_noise_sw_i(Fl_Check_Button* o, void*) {
  cl_gts_master.cb_rot_trace_enoise_preview();
if (o->value()) {
	o->box(FL_SHADOW_BOX);
	o->redraw();
}
else {
	o->box(FL_FLAT_BOX);
	o->redraw();
};
}
void gts_gui::cb_chkbtn_trace_filter_erase_dot_noise_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chkbtn_trace_filter_erase_dot_noise_sw_i(o,v);
}

void gts_gui::cb_filinp_trace_save_dir_path_i(Fl_File_Input*, void*) {
  cl_gts_master.cl_trace_files.cb_check_existing_saved_file();
}
void gts_gui::cb_filinp_trace_save_dir_path(Fl_File_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_filinp_trace_save_dir_path_i(o,v);
}

void gts_gui::cb_17_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_files.cb_browse_save_folder();
cl_gts_master.cl_trace_files.cb_check_existing_saved_file();
}
void gts_gui::cb_17(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_17_i(o,v);
}

void gts_gui::cb_strinp_trace_save_file_head_i(Fl_Input* o, void*) {
  cl_gts_master.cl_trace_files.cb_check_existing_saved_file();
if (cl_gts_master.cl_number.is_trace()) {
	output_number_file_head_name->value( o->value() );
};
}
void gts_gui::cb_strinp_trace_save_file_head(Fl_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_strinp_trace_save_file_head_i(o,v);
}

void gts_gui::cb_output_trace_save_number_format_i(Fl_Output* o, void*) {
  cl_gts_master.cl_set_number_format.cb_dialog_set_number_format(
	window_trace_files ,o
);
}
void gts_gui::cb_output_trace_save_number_format(Fl_Output* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_output_trace_save_number_format_i(o,v);
}

void gts_gui::cb_choice_trace_save_image_format_i(Fl_Choice*, void*) {
  cl_gts_master.cl_trace_files.cb_check_existing_saved_file();
}
void gts_gui::cb_choice_trace_save_image_format(Fl_Choice* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_choice_trace_save_image_format_i(o,v);
}

void gts_gui::cb_18_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_files.cb_set_number();
cl_gts_master.cl_trace_files.cb_check_existing_saved_file();
}
void gts_gui::cb_18(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_18_i(o,v);
}

void gts_gui::cb_19_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_files.cb_start();
}
void gts_gui::cb_19(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_19_i(o,v);
}

void gts_gui::cb_window_number_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_number->hide();
cl_gts_gui.menite_number->clear();
}
void gts_gui::cb_window_number(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_number_i(o,v);
}

void gts_gui::cb_1a_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_number.select_all();
}
void gts_gui::cb_1a(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_1a_i(o,v);
}

void gts_gui::cb_1b_i(Fl_Menu_*, void*) {
  cl_gts_master.cl_number.cb_remove_selected();
}
void gts_gui::cb_1b(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_1b_i(o,v);
}

Fl_Menu_Item gts_gui::menu_1[] = {
 {"\347\267\250\351\233\206", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\345\205\250\351\201\270\346\212\236", 0x40061,  (Fl_Callback*)gts_gui::cb_1a, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"\345\211\212\351\231\244", 0x40078,  (Fl_Callback*)gts_gui::cb_1b, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void gts_gui::cb_norinp_number_input_i(Fl_Input*, void*) {
  cl_gts_master.cl_number.cb_set_list_from_string();
}
void gts_gui::cb_norinp_number_input(Fl_Input* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_norinp_number_input_i(o,v);
}

void gts_gui::cb_selbro_number_list_i(Fl_Browser*, void*) {
  cl_gts_master.cb_number_read_and_trace_and_preview();
}
void gts_gui::cb_selbro_number_list(Fl_Browser* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_selbro_number_list_i(o,v);
}

void gts_gui::cb_window_trace_batch_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_trace_batch->hide();  /* Window閉じる */
cl_gts_gui.menite_trace_batch->clear(); /* menuのcheck外す */;
}
void gts_gui::cb_window_trace_batch(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_trace_batch_i(o,v);
}

void gts_gui::cb_1c_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_batch.cb_add_or_select();
}
void gts_gui::cb_1c(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_1c_i(o,v);
}

void gts_gui::cb_1d_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_batch.cb_upper();
}
void gts_gui::cb_1d(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_1d_i(o,v);
}

void gts_gui::cb_1e_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_batch.cb_lower();
}
void gts_gui::cb_1e(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_1e_i(o,v);
}

void gts_gui::cb_1f_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_batch.cb_delete();
}
void gts_gui::cb_1f(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_1f_i(o,v);
}

void gts_gui::cb_20_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_batch.cb_run();
}
void gts_gui::cb_20(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_20_i(o,v);
}

void gts_gui::cb_window_trace_params_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_trace_params->hide();
cl_gts_gui.menite_trace_params->clear();
}
void gts_gui::cb_window_trace_params(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_trace_params_i(o,v);
}

void gts_gui::cb_button_trace_params_i(fltk_button_trace_params*, void*) {
  cl_gts_master.cl_config.open_only_trace_params();
}
void gts_gui::cb_button_trace_params(fltk_button_trace_params* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_button_trace_params_i(o,v);
}

void gts_gui::cb_22_i(Fl_Button* o, void*) {
  if (o->value()) {
window_trace_params->size(
 togbut_trace_open_right_middle_sw->x()+togbut_trace_open_right_middle_sw->w()+5
 ,window_trace_params->h());
togbut_trace_open_right_middle_sw->value(0);
} else {
window_trace_params->size(   o->x() + o->w() + 5 ,window_trace_params->h());
};
}
void gts_gui::cb_22(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_22_i(o,v);
}

#include <FL/Fl_Image.H>
static const unsigned char idata_icon_open_close_right[] =
{192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,192,192,192,192,
192,192,192,192,192,192,192,192,24,24,24,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,
24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,24,24,24,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,
24,24,24,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,24,24,24,24,24,24,0,0,0,24,24,24,192,192,192,192,192,192,192,192,192,
192,192,192,24,24,24,0,0,0,24,24,24,24,24,24,192,192,192,192,192,192,192,192,
192,24,24,24,24,24,24,0,0,0,0,0,0,24,24,24,192,192,192,192,192,192,192,192,192,
192,192,192,24,24,24,0,0,0,0,0,0,24,24,24,24,24,24,192,192,192,24,24,24,24,24,
24,0,0,0,0,0,0,0,0,0,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,
24,24,24,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,0,
0,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,0,0,0,0,0,
0,0,0,0,24,24,24,24,24,24,192,192,192,24,24,24,24,24,24,0,0,0,0,0,0,24,24,24,
192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,0,0,0,0,0,0,24,24,24,
24,24,24,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,0,0,0,24,24,24,
192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,0,0,0,24,24,24,24,24,
24,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,
24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,
24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,
192,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,192,192,192,192,
192,192,192,192,192,192,192,192,24,24,24,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192};
static Fl_Image *image_icon_open_close_right() {
  static Fl_Image *image = new Fl_RGB_Image(idata_icon_open_close_right, 16, 16, 3, 0);
  return image;
}

void gts_gui::cb_togbut_trace_open_under_sw_i(Fl_Button* o, void*) {
  if (o->value()) {
window_trace_params->size(window_trace_params->w(),group_trace_params->h());
} else {
window_trace_params->size(window_trace_params->w(),cl_gts_master.cl_trace_params.cb_get_window_height_active());
};
}
void gts_gui::cb_togbut_trace_open_under_sw(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_togbut_trace_open_under_sw_i(o,v);
}

static const unsigned char idata_icon_open_close_under[] =
{192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,24,24,24,24,24,24,24,24,24,24,24,24,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,0,0,0,0,0,0,24,24,24,24,
24,24,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,
24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,24,24,24,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,24,24,24,24,
24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,0,
0,0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,
24,24,24,24,0,0,0,0,0,0,24,24,24,24,24,24,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,24,24,24,24,24,24,24,24,24,24,24,24,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,24,24,24,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192};
static Fl_Image *image_icon_open_close_under() {
  static Fl_Image *image = new Fl_RGB_Image(idata_icon_open_close_under, 16, 16, 3, 0);
  return image;
}

void gts_gui::cb_togbut_trace_open_right_middle_sw_i(Fl_Button* o, void*) {
  if (o->value()) {
window_trace_params->size(group_trace_params->w(),window_trace_params->h());
} else {
window_trace_params->size(   o->x() + o->w() + 5 ,window_trace_params->h());
};
}
void gts_gui::cb_togbut_trace_open_right_middle_sw(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_togbut_trace_open_right_middle_sw_i(o,v);
}

static const unsigned char idata_icon_open_close_right_11x11[] =
{192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,24,24,24,
192,192,192,192,192,192,192,192,192,0,0,0,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,0,0,0,24,24,24,192,192,192,192,192,192,192,192,192,0,0,
0,24,24,24,192,192,192,192,192,192,192,192,192,0,0,0,0,0,0,24,24,24,192,192,
192,192,192,192,192,192,192,0,0,0,24,24,24,0,0,0,192,192,192,0,0,0,0,0,0,0,0,0,
24,24,24,192,192,192,192,192,192,192,192,192,0,0,0,24,24,24,0,0,0,0,0,0,192,
192,192,0,0,0,0,0,0,24,24,24,192,192,192,192,192,192,192,192,192,0,0,0,24,24,24,
0,0,0,192,192,192,192,192,192,192,192,192,0,0,0,24,24,24,192,192,192,192,192,
192,192,192,192,0,0,0,24,24,24,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,24,24,24,192,192,192,192,192,192,192,192,192,0,0,0,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192};
static Fl_Image *image_icon_open_close_right_11x11() {
  static Fl_Image *image = new Fl_RGB_Image(idata_icon_open_close_right_11x11, 11, 11, 3, 0);
  return image;
}

void gts_gui::cb_chebut_trace_display_target_sw_i(Fl_Check_Button*, void*) {
  image_view->redraw();
}
void gts_gui::cb_chebut_trace_display_target_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_chebut_trace_display_target_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_display_main_sw_i(Fl_Check_Button*, void*) {
  image_view->redraw();
}
void gts_gui::cb_chebut_trace_display_main_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_chebut_trace_display_main_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_0_enable_sw_i(Fl_Check_Button* o, void*) {
  if (o->value()) {group_trace_0->activate();  }
else            {group_trace_0->deactivate();}
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_chebut_trace_0_enable_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chebut_trace_0_enable_sw_i(o,v);
}

void gts_gui::cb_button_trace_0_target_rgb_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_open_editor(
	window_trace_params ,o ,0
);
}
void gts_gui::cb_button_trace_0_target_rgb(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_0_target_rgb_i(o,v);
}

void gts_gui::cb_valinp_trace_0_thickness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_trace_0_thickness)->value(o->value());
image_view->redraw();
}
void gts_gui::cb_valinp_trace_0_thickness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_0_thickness_i(o,v);
}

void gts_gui::cb_scrbar_trace_0_thickness_i(Fl_Scrollbar* o, void*) {
  valinp_trace_0_thickness->value(o->value());
image_view->redraw();
}
void gts_gui::cb_scrbar_trace_0_thickness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scrbar_trace_0_thickness_i(o,v);
}

void gts_gui::cb_button_trace_0_hue_min_i(Fl_Button* o, void*) {
  //cl_gts_master.cl_trace_params.cb_hue_min_open_editor( window_trace_params ,o ,0 );
}
void gts_gui::cb_button_trace_0_hue_min(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_0_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_0_hue_min_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_0_hue_min(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_0_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_0_hue_max_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_0_hue_max(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_0_hue_max_i(o,v);
}

void gts_gui::cb_button_trace_0_hue_minmax_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_hue_minmax_open_editor(
/* window_trace_params ,o ,*/0 );
}
void gts_gui::cb_button_trace_0_hue_minmax(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_0_hue_minmax_i(o,v);
}

void gts_gui::cb_chebut_trace_0_rotate360_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_0_rotate360_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_0_rotate360_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_0_display_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_0_display_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_0_display_sw_i(o,v);
}

void gts_gui::cb_valinp_trace_0_slope_deg_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_0_slope_deg(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_0_slope_deg_i(o,v);
}

void gts_gui::cb_valinp_trace_0_intercept_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_0_intercept(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_0_intercept_i(o,v);
}

void gts_gui::cb_chebut_trace_1_enable_sw_i(Fl_Check_Button* o, void*) {
  if (o->value()) {group_trace_1->activate();  }
else            {group_trace_1->deactivate();}
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_chebut_trace_1_enable_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chebut_trace_1_enable_sw_i(o,v);
}

void gts_gui::cb_button_trace_1_target_rgb_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_open_editor(
	window_trace_params ,o ,1
);
}
void gts_gui::cb_button_trace_1_target_rgb(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_1_target_rgb_i(o,v);
}

void gts_gui::cb_valinp_trace_1_thickness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_trace_1_thickness)->value(o->value());
image_view->redraw();
}
void gts_gui::cb_valinp_trace_1_thickness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_1_thickness_i(o,v);
}

void gts_gui::cb_scrbar_trace_1_thickness_i(Fl_Scrollbar* o, void*) {
  valinp_trace_1_thickness->value(o->value());
image_view->redraw();
}
void gts_gui::cb_scrbar_trace_1_thickness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scrbar_trace_1_thickness_i(o,v);
}

void gts_gui::cb_button_trace_1_hue_min_i(Fl_Button* o, void*) {
  //cl_gts_master.cl_trace_params.cb_hue_min_open_editor( window_trace_params ,o ,1 );
}
void gts_gui::cb_button_trace_1_hue_min(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_1_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_1_hue_min_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_1_hue_min(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_1_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_1_hue_max_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_1_hue_max(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_1_hue_max_i(o,v);
}

void gts_gui::cb_button_trace_1_hue_minmax_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_hue_minmax_open_editor(
/* window_trace_params ,o ,*/1 );
}
void gts_gui::cb_button_trace_1_hue_minmax(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_1_hue_minmax_i(o,v);
}

void gts_gui::cb_chebut_trace_1_rotate360_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_1_rotate360_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_1_rotate360_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_1_display_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_1_display_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_1_display_sw_i(o,v);
}

void gts_gui::cb_valinp_trace_1_slope_deg_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_1_slope_deg(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_1_slope_deg_i(o,v);
}

void gts_gui::cb_valinp_trace_1_intercept_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_1_intercept(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_1_intercept_i(o,v);
}

void gts_gui::cb_chebut_trace_2_enable_sw_i(Fl_Check_Button* o, void*) {
  if (o->value()) {group_trace_2->activate();  }
else            {group_trace_2->deactivate();}
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_chebut_trace_2_enable_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chebut_trace_2_enable_sw_i(o,v);
}

void gts_gui::cb_button_trace_2_target_rgb_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_open_editor(
	window_trace_params ,o ,2
);
}
void gts_gui::cb_button_trace_2_target_rgb(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_2_target_rgb_i(o,v);
}

void gts_gui::cb_valinp_trace_2_thickness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_trace_2_thickness)->value(o->value());
image_view->redraw();
}
void gts_gui::cb_valinp_trace_2_thickness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_2_thickness_i(o,v);
}

void gts_gui::cb_scrbar_trace_2_thickness_i(Fl_Scrollbar* o, void*) {
  valinp_trace_2_thickness->value(o->value());
image_view->redraw();
}
void gts_gui::cb_scrbar_trace_2_thickness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scrbar_trace_2_thickness_i(o,v);
}

void gts_gui::cb_button_trace_2_hue_min_i(Fl_Button* o, void*) {
  //cl_gts_master.cl_trace_params.cb_hue_min_open_editor( window_trace_params ,o ,2 );
}
void gts_gui::cb_button_trace_2_hue_min(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_2_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_2_hue_min_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_2_hue_min(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_2_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_2_hue_max_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_2_hue_max(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_2_hue_max_i(o,v);
}

void gts_gui::cb_button_trace_2_hue_minmax_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_hue_minmax_open_editor(
/* window_trace_params ,o ,*/2 );
}
void gts_gui::cb_button_trace_2_hue_minmax(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_2_hue_minmax_i(o,v);
}

void gts_gui::cb_chebut_trace_2_rotate360_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_2_rotate360_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_2_rotate360_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_2_display_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_2_display_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_2_display_sw_i(o,v);
}

void gts_gui::cb_valinp_trace_2_slope_deg_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_2_slope_deg(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_2_slope_deg_i(o,v);
}

void gts_gui::cb_valinp_trace_2_intercept_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_2_intercept(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_2_intercept_i(o,v);
}

void gts_gui::cb_chebut_trace_3_enable_sw_i(Fl_Check_Button* o, void*) {
  if (o->value()) {group_trace_3->activate();  }
else            {group_trace_3->deactivate();}
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_chebut_trace_3_enable_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chebut_trace_3_enable_sw_i(o,v);
}

void gts_gui::cb_button_trace_3_target_rgb_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_open_editor(
	window_trace_params ,o ,3
);
}
void gts_gui::cb_button_trace_3_target_rgb(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_3_target_rgb_i(o,v);
}

void gts_gui::cb_valinp_trace_3_thickness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_trace_3_thickness)->value(o->value());
image_view->redraw();
}
void gts_gui::cb_valinp_trace_3_thickness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_3_thickness_i(o,v);
}

void gts_gui::cb_scrbar_trace_3_thickness_i(Fl_Scrollbar* o, void*) {
  valinp_trace_3_thickness->value(o->value());
image_view->redraw();
}
void gts_gui::cb_scrbar_trace_3_thickness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scrbar_trace_3_thickness_i(o,v);
}

void gts_gui::cb_button_trace_3_hue_min_i(Fl_Button* o, void*) {
  //cl_gts_master.cl_trace_params.cb_hue_min_open_editor( window_trace_params ,o ,3 );
}
void gts_gui::cb_button_trace_3_hue_min(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_3_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_3_hue_min_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_3_hue_min(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_3_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_3_hue_max_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_3_hue_max(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_3_hue_max_i(o,v);
}

void gts_gui::cb_button_trace_3_hue_minmax_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_hue_minmax_open_editor(
/* window_trace_params ,o ,*/3 );
}
void gts_gui::cb_button_trace_3_hue_minmax(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_3_hue_minmax_i(o,v);
}

void gts_gui::cb_chebut_trace_3_rotate360_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_3_rotate360_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_3_rotate360_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_3_display_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_3_display_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_3_display_sw_i(o,v);
}

void gts_gui::cb_valinp_trace_3_slope_deg_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_3_slope_deg(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_3_slope_deg_i(o,v);
}

void gts_gui::cb_valinp_trace_3_intercept_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_3_intercept(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_3_intercept_i(o,v);
}

void gts_gui::cb_chebut_trace_4_enable_sw_i(Fl_Check_Button* o, void*) {
  if (o->value()) {group_trace_4->activate();  }
else            {group_trace_4->deactivate();}
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_chebut_trace_4_enable_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chebut_trace_4_enable_sw_i(o,v);
}

void gts_gui::cb_button_trace_4_target_rgb_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_open_editor(
	window_trace_params ,o ,4
);
}
void gts_gui::cb_button_trace_4_target_rgb(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_4_target_rgb_i(o,v);
}

void gts_gui::cb_valinp_trace_4_thickness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_trace_4_thickness)->value(o->value());
image_view->redraw();
}
void gts_gui::cb_valinp_trace_4_thickness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_4_thickness_i(o,v);
}

void gts_gui::cb_scrbar_trace_4_thickness_i(Fl_Scrollbar* o, void*) {
  valinp_trace_4_thickness->value(o->value());
image_view->redraw();
}
void gts_gui::cb_scrbar_trace_4_thickness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scrbar_trace_4_thickness_i(o,v);
}

void gts_gui::cb_button_trace_4_hue_min_i(Fl_Button* o, void*) {
  //cl_gts_master.cl_trace_params.cb_hue_min_open_editor( window_trace_params ,o ,4 );
}
void gts_gui::cb_button_trace_4_hue_min(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_4_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_4_hue_min_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_4_hue_min(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_4_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_4_hue_max_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_4_hue_max(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_4_hue_max_i(o,v);
}

void gts_gui::cb_button_trace_4_hue_minmax_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_hue_minmax_open_editor(
/* window_trace_params ,o ,*/4 );
}
void gts_gui::cb_button_trace_4_hue_minmax(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_4_hue_minmax_i(o,v);
}

void gts_gui::cb_chebut_trace_4_rotate360_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_4_rotate360_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_4_rotate360_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_4_display_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_4_display_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_4_display_sw_i(o,v);
}

void gts_gui::cb_valinp_trace_4_slope_deg_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_4_slope_deg(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_4_slope_deg_i(o,v);
}

void gts_gui::cb_valinp_trace_4_intercept_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_4_intercept(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_4_intercept_i(o,v);
}

void gts_gui::cb_chebut_trace_5_enable_sw_i(Fl_Check_Button* o, void*) {
  if (o->value()) {group_trace_5->activate();  }
else            {group_trace_5->deactivate();}
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_chebut_trace_5_enable_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_chebut_trace_5_enable_sw_i(o,v);
}

void gts_gui::cb_button_trace_5_target_rgb_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_open_editor(
	window_trace_params ,o ,5
);
}
void gts_gui::cb_button_trace_5_target_rgb(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_5_target_rgb_i(o,v);
}

void gts_gui::cb_valinp_trace_5_thickness_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_trace_5_thickness)->value(o->value());
image_view->redraw();
}
void gts_gui::cb_valinp_trace_5_thickness(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_5_thickness_i(o,v);
}

void gts_gui::cb_scrbar_trace_5_thickness_i(Fl_Scrollbar* o, void*) {
  valinp_trace_5_thickness->value(o->value());
image_view->redraw();
}
void gts_gui::cb_scrbar_trace_5_thickness(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scrbar_trace_5_thickness_i(o,v);
}

void gts_gui::cb_button_trace_5_hue_min_i(Fl_Button* o, void*) {
  //cl_gts_master.cl_trace_params.cb_hue_min_open_editor( window_trace_params ,o ,5 );
}
void gts_gui::cb_button_trace_5_hue_min(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_5_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_5_hue_min_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_5_hue_min(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_5_hue_min_i(o,v);
}

void gts_gui::cb_valinp_trace_5_hue_max_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_5_hue_max(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_5_hue_max_i(o,v);
}

void gts_gui::cb_button_trace_5_hue_minmax_i(Fl_Button* o, void*) {
  cl_gts_master.cl_trace_params.cb_hue_minmax_open_editor(
/* window_trace_params ,o ,*/5 );
}
void gts_gui::cb_button_trace_5_hue_minmax(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_button_trace_5_hue_minmax_i(o,v);
}

void gts_gui::cb_chebut_trace_5_rotate360_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_5_rotate360_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_5_rotate360_sw_i(o,v);
}

void gts_gui::cb_chebut_trace_5_display_sw_i(Fl_Check_Button*, void*) {
  hsv_view->redraw();
}
void gts_gui::cb_chebut_trace_5_display_sw(Fl_Check_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_chebut_trace_5_display_sw_i(o,v);
}

void gts_gui::cb_valinp_trace_5_slope_deg_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_5_slope_deg(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_5_slope_deg_i(o,v);
}

void gts_gui::cb_valinp_trace_5_intercept_i(Fl_Value_Input*, void*) {
  image_view->redraw();
}
void gts_gui::cb_valinp_trace_5_intercept(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_valinp_trace_5_intercept_i(o,v);
}

void gts_gui::cb_button_change_0_1_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_swap_widget_set(0,1);
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_button_change_0_1(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_button_change_0_1_i(o,v);
}

static const unsigned char idata_icon_change_updown[] =
{192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,187,187,187,165,165,165,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,188,188,188,62,62,62,35,35,35,185,
185,185,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
106,106,106,0,0,0,0,0,0,56,56,56,186,186,186,192,192,192,192,192,192,192,192,
192,192,192,192,154,154,154,4,4,4,0,0,0,0,0,0,0,0,0,96,96,96,192,192,192,192,
192,192,192,192,192,164,164,164,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,145,145,145,
192,192,192,192,192,192,129,129,129,90,90,90,45,45,45,0,0,0,0,0,0,17,17,17,90,
90,90,94,94,94,188,188,188,192,192,192,192,192,192,192,192,192,98,98,98,0,0,0,
0,0,0,35,35,35,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,98,98,98,0,0,0,0,0,0,35,35,35,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,98,98,98,0,0,0,0,0,0,35,35,35,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,98,98,98,0,0,0,0,0,
0,35,35,35,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,98,98,98,0,0,0,0,0,0,35,35,35,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,98,98,98,0,0,0,0,0,0,35,35,35,192,192,192,192,
192,192,192,192,192,192,192,192,143,143,143,116,116,116,59,59,59,0,0,0,0,0,0,21,
21,21,116,116,116,117,117,117,188,188,188,192,192,192,157,157,157,2,2,2,0,0,0,
0,0,0,0,0,0,0,0,0,1,1,1,130,130,130,192,192,192,192,192,192,192,192,192,141,
141,141,1,1,1,0,0,0,0,0,0,0,0,0,85,85,85,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,96,96,96,0,0,0,0,0,0,44,44,44,183,183,183,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,185,185,185,48,48,48,27,27,27,
181,181,181,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,183,183,183,157,157,157,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,
192,192,192,192,192,192,192,192,192,192,192,192};
static Fl_Image *image_icon_change_updown() {
  static Fl_Image *image = new Fl_RGB_Image(idata_icon_change_updown, 10, 20, 3, 0);
  return image;
}

void gts_gui::cb_button_change_1_2_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_swap_widget_set(1,2);
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_button_change_1_2(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_button_change_1_2_i(o,v);
}

void gts_gui::cb_button_change_2_3_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_swap_widget_set(2,3);
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_button_change_2_3(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_button_change_2_3_i(o,v);
}

void gts_gui::cb_button_change_3_4_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_swap_widget_set(3,4);
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_button_change_3_4(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_button_change_3_4_i(o,v);
}

void gts_gui::cb_button_change_4_5_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_swap_widget_set(4,5);
image_view->redraw();
window_trace_hue_minmax->hide();
}
void gts_gui::cb_button_change_4_5(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_button_change_4_5_i(o,v);
}

void gts_gui::cb_window_trace_hsv_view_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_trace_hsv_view->hide();
cl_gts_gui.menite_trace_hsv_view->clear();
}
void gts_gui::cb_window_trace_hsv_view(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_trace_hsv_view_i(o,v);
}

void gts_gui::cb_menite_hsv_dot_normal_i(Fl_Menu_*, void*) {
  image_view->redraw();
}
void gts_gui::cb_menite_hsv_dot_normal(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_hsv_dot_normal_i(o,v);
}

void gts_gui::cb_menite_hsv_dot_trace_area_i(Fl_Menu_*, void*) {
  image_view->redraw();
}
void gts_gui::cb_menite_hsv_dot_trace_area(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_hsv_dot_trace_area_i(o,v);
}

void gts_gui::cb_menite_hsv_dot_white_i(Fl_Menu_*, void*) {
  image_view->redraw();
}
void gts_gui::cb_menite_hsv_dot_white(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_hsv_dot_white_i(o,v);
}

void gts_gui::cb_menite_hsv_dot_black_i(Fl_Menu_*, void*) {
  image_view->redraw();
}
void gts_gui::cb_menite_hsv_dot_black(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_hsv_dot_black_i(o,v);
}

void gts_gui::cb_menite_hsv_random_position_i(Fl_Menu_*, void*) {
  image_view->redraw();
}
void gts_gui::cb_menite_hsv_random_position(Fl_Menu_* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_menite_hsv_random_position_i(o,v);
}

Fl_Menu_Item gts_gui::menu_2[] = {
 {"View", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Color of Display", 0,  0, 0, 80, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Color", 0,  (Fl_Callback*)gts_gui::cb_menite_hsv_dot_normal, 0, 12, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Trace Area", 0,  (Fl_Callback*)gts_gui::cb_menite_hsv_dot_trace_area, 0, 8, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"White", 0,  (Fl_Callback*)gts_gui::cb_menite_hsv_dot_white, 0, 8, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Black", 0,  (Fl_Callback*)gts_gui::cb_menite_hsv_dot_black, 0, 8, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Random Position", 0,  (Fl_Callback*)gts_gui::cb_menite_hsv_random_position, 0, 2, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* gts_gui::menite_hsv_dot_normal = gts_gui::menu_2 + 2;
Fl_Menu_Item* gts_gui::menite_hsv_dot_trace_area = gts_gui::menu_2 + 3;
Fl_Menu_Item* gts_gui::menite_hsv_dot_white = gts_gui::menu_2 + 4;
Fl_Menu_Item* gts_gui::menite_hsv_dot_black = gts_gui::menu_2 + 5;
Fl_Menu_Item* gts_gui::menite_hsv_random_position = gts_gui::menu_2 + 7;

void gts_gui::cb_window_set_number_format_i(Fl_Double_Window* o, void*) {
  o->hide();
}
void gts_gui::cb_window_set_number_format(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_set_number_format_i(o,v);
}

void gts_gui::cb_choice_input_num_form_separator_i(Fl_Choice*, void*) {
  cl_gts_master.cl_set_number_format.cb_separator();
}
void gts_gui::cb_choice_input_num_form_separator(Fl_Choice* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_choice_input_num_form_separator_i(o,v);
}

void gts_gui::cb_counte_input_num_form_num_of_digits_i(Fl_Counter*, void*) {
  cl_gts_master.cl_set_number_format.cb_digits();
}
void gts_gui::cb_counte_input_num_form_num_of_digits(Fl_Counter* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_counte_input_num_form_num_of_digits_i(o,v);
}

void gts_gui::cb_23_i(Fl_Button*, void*) {
  cl_gts_master.cl_set_number_format.cb_ok();
}
void gts_gui::cb_23(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_23_i(o,v);
}

void gts_gui::cb_24_i(Fl_Button*, void*) {
  window_set_number_format->hide();
}
void gts_gui::cb_24(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_24_i(o,v);
}

void gts_gui::cb_window_set_aspect_ratio_i(Fl_Double_Window* o, void*) {
  o->hide();
}
void gts_gui::cb_window_set_aspect_ratio(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_set_aspect_ratio_i(o,v);
}

void gts_gui::cb_25_i(Fl_Button*, void*) {
  cl_gts_master.cl_area_and_rot90.cb_ok_aspect_ratio();
}
void gts_gui::cb_25(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_25_i(o,v);
}

void gts_gui::cb_26_i(Fl_Button*, void*) {
  window_set_aspect_ratio->hide();
}
void gts_gui::cb_26(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->user_data()))->cb_26_i(o,v);
}

void gts_gui::cb_window_set_color_i(Fl_Double_Window* o, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_cancel();
o->hide();
}
void gts_gui::cb_window_set_color(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_set_color_i(o,v);
}

void gts_gui::cb_valinp_set_color_hue_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_set_color_hue)->value(o->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change(true);
}
void gts_gui::cb_valinp_set_color_hue(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_set_color_hue_i(o,v);
}

void gts_gui::cb_scrbar_set_color_hue_i(Fl_Scrollbar* o, void*) {
  valinp_set_color_hue->value(((Fl_Valuator *)o)->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change(true);
}
void gts_gui::cb_scrbar_set_color_hue(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_set_color_hue_i(o,v);
}

void gts_gui::cb_valinp_set_color_sat_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_set_color_sat)->value(o->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change(true);
}
void gts_gui::cb_valinp_set_color_sat(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_set_color_sat_i(o,v);
}

void gts_gui::cb_scrbar_set_color_sat_i(Fl_Scrollbar* o, void*) {
  valinp_set_color_sat->value(((Fl_Valuator *)o)->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change(true);
}
void gts_gui::cb_scrbar_set_color_sat(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_set_color_sat_i(o,v);
}

void gts_gui::cb_valinp_set_color_val_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_set_color_val)->value(o->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change(true);
}
void gts_gui::cb_valinp_set_color_val(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_set_color_val_i(o,v);
}

void gts_gui::cb_scrbar_set_color_val_i(Fl_Scrollbar* o, void*) {
  valinp_set_color_val->value(((Fl_Valuator *)o)->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change(true);
}
void gts_gui::cb_scrbar_set_color_val(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_set_color_val_i(o,v);
}

void gts_gui::cb_valinp_set_color_red_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_set_color_red)->value(o->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change();
}
void gts_gui::cb_valinp_set_color_red(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_set_color_red_i(o,v);
}

void gts_gui::cb_scrbar_set_color_red_i(Fl_Scrollbar* o, void*) {
  valinp_set_color_red->value(((Fl_Valuator *)o)->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change();
}
void gts_gui::cb_scrbar_set_color_red(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_set_color_red_i(o,v);
}

void gts_gui::cb_valinp_set_color_gre_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_set_color_gre)->value(o->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change();
}
void gts_gui::cb_valinp_set_color_gre(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_set_color_gre_i(o,v);
}

void gts_gui::cb_scrbar_set_color_gre_i(Fl_Scrollbar* o, void*) {
  valinp_set_color_gre->value(((Fl_Valuator *)o)->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change();
}
void gts_gui::cb_scrbar_set_color_gre(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_set_color_gre_i(o,v);
}

void gts_gui::cb_valinp_set_color_blu_i(Fl_Value_Input* o, void*) {
  ((Fl_Valuator *)scrbar_set_color_blu)->value(o->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change();
}
void gts_gui::cb_valinp_set_color_blu(Fl_Value_Input* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_valinp_set_color_blu_i(o,v);
}

void gts_gui::cb_scrbar_set_color_blu_i(Fl_Scrollbar* o, void*) {
  valinp_set_color_blu->value(((Fl_Valuator *)o)->value());
cl_gts_master.cl_trace_params.cb_target_rgb_color_change();
}
void gts_gui::cb_scrbar_set_color_blu(Fl_Scrollbar* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_scrbar_set_color_blu_i(o,v);
}

void gts_gui::cb_27_i(Fl_Button*, void*) {
  window_set_color->hide();
}
void gts_gui::cb_27(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_27_i(o,v);
}

void gts_gui::cb_28_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_target_rgb_color_cancel();
window_set_color->hide();
}
void gts_gui::cb_28(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_28_i(o,v);
}

void gts_gui::cb_window_trace_hue_minmax_i(Fl_Double_Window*, void*) {
  cl_gts_gui.window_trace_hue_minmax->hide();
cl_gts_gui.menite_trace_hue_minmax->clear();
}
void gts_gui::cb_window_trace_hue_minmax(Fl_Double_Window* o, void* v) {
  ((gts_gui*)(o->user_data()))->cb_window_trace_hue_minmax_i(o,v);
}

void gts_gui::cb_radbut_hue_min_sw_i(Fl_Button*, void*) {
  cyclic_color_wheel->set_min_or_max(false);
cyclic_color_wheel->redraw();
}
void gts_gui::cb_radbut_hue_min_sw(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_radbut_hue_min_sw_i(o,v);
}

void gts_gui::cb_radbut_hue_max_sw_i(Fl_Button*, void*) {
  cyclic_color_wheel->set_min_or_max(true);
cyclic_color_wheel->redraw();
}
void gts_gui::cb_radbut_hue_max_sw(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->parent()->user_data()))->cb_radbut_hue_max_sw_i(o,v);
}

void gts_gui::cb_29_i(Fl_Button*, void*) {
  cl_gts_master.cl_trace_params.cb_hue_min_or_max_cancel();
cyclic_color_wheel->set_reset();
cyclic_color_wheel->redraw();
}
void gts_gui::cb_29(Fl_Button* o, void* v) {
  ((gts_gui*)(o->parent()->parent()->user_data()))->cb_29_i(o,v);
}

Fl_Double_Window* gts_gui::make_window() {
  { window_main_view = new Fl_Double_Window(720, 565, "GTS");
    window_main_view->callback((Fl_Callback*)cb_window_main_view, (void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 720, 25);
      o->menu(menu_);
    } // Fl_Menu_Bar* o
    { image_view = new fl_gl_image_view(0, 25, 705, 525, "label");
      image_view->box(FL_NO_BOX);
      image_view->color(FL_BACKGROUND_COLOR);
      image_view->selection_color(FL_BACKGROUND_COLOR);
      image_view->labeltype(FL_NORMAL_LABEL);
      image_view->labelfont(0);
      image_view->labelsize(14);
      image_view->labelcolor(FL_FOREGROUND_COLOR);
      image_view->align(Fl_Align(FL_ALIGN_CENTER));
      image_view->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(image_view);
    } // fl_gl_image_view* image_view
    { scrbar_view_x = new Fl_Scrollbar(0, 550, 705, 15);
      scrbar_view_x->type(1);
      scrbar_view_x->box(FL_BORDER_BOX);
      scrbar_view_x->callback((Fl_Callback*)cb_scrbar_view_x);
    } // Fl_Scrollbar* scrbar_view_x
    { scrbar_view_y = new Fl_Scrollbar(705, 25, 15, 525);
      scrbar_view_y->box(FL_BORDER_BOX);
      scrbar_view_y->callback((Fl_Callback*)cb_scrbar_view_y);
    } // Fl_Scrollbar* scrbar_view_y
    window_main_view->end();
  } // Fl_Double_Window* window_main_view
  { window_next_scan = new Fl_Double_Window(545, 100, "\346\254\241\343\201\256\343\202\271\343\202\255\343\203\243\343\203\263");
    window_next_scan->user_data((void*)(this));
    { button_rescan = new Fl_Button(60, 75, 110, 25, "\345\220\214\347\225\252\345\217\267 (Space)");
      button_rescan->shortcut(0x20);
      button_rescan->callback((Fl_Callback*)cb_button_rescan);
    } // Fl_Button* button_rescan
    { Fl_Button* o = new Fl_Button(325, 40, 120, 60, "\346\254\241\347\225\252\345\217\267 (Enter)");
      o->shortcut(0xff0d);
      o->callback((Fl_Callback*)cb_Enter);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(455, 75, 90, 25, "\344\270\255\346\255\242 (Esc)");
      o->shortcut(0xff1b);
      o->callback((Fl_Callback*)cb_Esc);
    } // Fl_Button* o
    { norout_crnt_scan_level = new Fl_Output(0, 0, 545, 40);
      norout_crnt_scan_level->box(FL_BORDER_BOX);
      norout_crnt_scan_level->textsize(30);
    } // Fl_Output* norout_crnt_scan_level
    { norout_crnt_scan_number = new Fl_Output(0, 75, 60, 25);
      norout_crnt_scan_number->box(FL_BORDER_BOX);
    } // Fl_Output* norout_crnt_scan_number
    { norout_next_scan_number = new Fl_Output(180, 40, 145, 60);
      norout_next_scan_number->box(FL_BORDER_BOX);
      norout_next_scan_number->textsize(60);
      norout_next_scan_number->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
    } // Fl_Output* norout_next_scan_number
    window_next_scan->set_modal();
    window_next_scan->end();
  } // Fl_Double_Window* window_next_scan
  { window_next_scan_non_modal = new Fl_Double_Window(545, 100, "\346\254\241\343\201\256\344\277\235\345\255\230 (\347\224\273\345\203\217\
\345\207\246\347\220\206\345\244\211\346\233\264\345\217\257\350\203\275)");
    window_next_scan_non_modal->callback((Fl_Callback*)cb_window_next_scan_non_modal, (void*)(this));
    { norout_next_save_non_modal = new Fl_Output(0, 10, 545, 25);
      norout_next_save_non_modal->box(FL_BORDER_BOX);
    } // Fl_Output* norout_next_save_non_modal
    { button_next_save_non_modal = new Fl_Button(325, 45, 110, 45, "\344\277\235\345\255\230 (Enter)");
      button_next_save_non_modal->shortcut(0xff0d);
      button_next_save_non_modal->callback((Fl_Callback*)cb_button_next_save_non_modal);
    } // Fl_Button* button_next_save_non_modal
    { Fl_Button* o = new Fl_Button(455, 65, 80, 25, "\344\270\255\346\255\242 (Esc)");
      o->shortcut(0xff1b);
      o->callback((Fl_Callback*)cb_Esc1);
    } // Fl_Button* o
    window_next_scan_non_modal->set_non_modal();
    window_next_scan_non_modal->end();
  } // Fl_Double_Window* window_next_scan_non_modal
  { window_area_and_rot90 = new Fl_Double_Window(200, 295, "\347\257\204\345\233\262\343\201\250\346\226\271\345\220\221");
    window_area_and_rot90->callback((Fl_Callback*)cb_window_area_and_rot90, (void*)(this));
    { button_area_and_rot90 = new fltk_button_area_and_rot90(5, 5, 130, 25, "\343\201\223\343\201\223\343\201\256\350\250\255\345\256\232\343\202\222\345\
\206\215\347\217\276...");
      button_area_and_rot90->box(FL_UP_BOX);
      button_area_and_rot90->color(FL_BACKGROUND_COLOR);
      button_area_and_rot90->selection_color(FL_BACKGROUND_COLOR);
      button_area_and_rot90->labeltype(FL_NORMAL_LABEL);
      button_area_and_rot90->labelfont(0);
      button_area_and_rot90->labelsize(14);
      button_area_and_rot90->labelcolor(FL_FOREGROUND_COLOR);
      button_area_and_rot90->callback((Fl_Callback*)cb_button_area_and_rot90);
      button_area_and_rot90->align(Fl_Align(FL_ALIGN_CENTER));
      button_area_and_rot90->when(FL_WHEN_RELEASE);
    } // fltk_button_area_and_rot90* button_area_and_rot90
    { Fl_Group* o = new Fl_Group(1, 35, 198, 25, "\350\247\243\345\203\217\345\272\246");
      o->box(FL_BORDER_FRAME);
      o->color((Fl_Color)41);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { valinp_area_reso = new Fl_Value_Input(85, 35, 40, 25, "DPI");
        valinp_area_reso->box(FL_BORDER_BOX);
        valinp_area_reso->minimum(50);
        valinp_area_reso->maximum(600);
        valinp_area_reso->value(400);
        valinp_area_reso->callback((Fl_Callback*)cb_valinp_area_reso);
        valinp_area_reso->align(Fl_Align(FL_ALIGN_RIGHT));
        valinp_area_reso->when(FL_WHEN_RELEASE);
      } // Fl_Value_Input* valinp_area_reso
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 65, 198, 25, "\346\226\271\345\220\221");
      o->box(FL_BORDER_FRAME);
      o->color((Fl_Color)41);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      { choice_rot90 = new Fl_Choice(57, 65, 90, 25, "\345\272\246");
        choice_rot90->box(FL_BORDER_BOX);
        choice_rot90->down_box(FL_BORDER_BOX);
        choice_rot90->callback((Fl_Callback*)cb_choice_rot90);
        choice_rot90->align(Fl_Align(FL_ALIGN_RIGHT));
        choice_rot90->menu(menu_choice_rot90);
      } // Fl_Choice* choice_rot90
      o->end();
    } // Fl_Group* o
    { button_scan_crop = new Fl_Button(95, 95, 100, 25, "\346\234\200\345\244\247\343\202\271\343\202\255\343\203\243\343\203\263");
      button_scan_crop->tooltip("Scan Overall and Crop");
      button_scan_crop->callback((Fl_Callback*)cb_button_scan_crop);
    } // Fl_Button* button_scan_crop
    { Fl_Group* o = new Fl_Group(0, 125, 200, 165);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { group_area_crop = new Fl_Group(1, 140, 198, 150, "\347\257\204\345\233\262");
        group_area_crop->box(FL_BORDER_FRAME);
        group_area_crop->color((Fl_Color)41);
        group_area_crop->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { Fl_Group* o = new Fl_Group(4, 160, 192, 25, "\351\226\213\345\247\213\344\275\215\347\275\256(\345\267\246\344\270\212)");
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { valinp_area_offset_cm_x = new Fl_Value_Input(25, 160, 55, 25, "\346\250\252");
            valinp_area_offset_cm_x->box(FL_BORDER_BOX);
            valinp_area_offset_cm_x->maximum(60);
            valinp_area_offset_cm_x->callback((Fl_Callback*)cb_valinp_area_offset_cm_x);
            valinp_area_offset_cm_x->when(FL_WHEN_RELEASE);
          } // Fl_Value_Input* valinp_area_offset_cm_x
          { valinp_area_offset_cm_y = new Fl_Value_Input(100, 160, 55, 25, "\347\270\246");
            valinp_area_offset_cm_y->box(FL_BORDER_BOX);
            valinp_area_offset_cm_y->maximum(60);
            valinp_area_offset_cm_y->callback((Fl_Callback*)cb_valinp_area_offset_cm_y);
            valinp_area_offset_cm_y->when(FL_WHEN_RELEASE);
          } // Fl_Value_Input* valinp_area_offset_cm_y
          { Fl_Text_Display* o = new Fl_Text_Display(163, 165, 0, 0, "cm");
            o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
          } // Fl_Text_Display* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(4, 210, 192, 75, "\345\244\247\343\201\215\343\201\225");
          o->box(FL_BORDER_FRAME);
          o->color((Fl_Color)41);
          o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { Fl_Group* o = new Fl_Group(5, 220, 150, 25);
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
            { valinp_area_size_cm_w = new Fl_Value_Input(25, 220, 55, 25, "\345\271\205");
              valinp_area_size_cm_w->box(FL_BORDER_BOX);
              valinp_area_size_cm_w->maximum(60);
              valinp_area_size_cm_w->callback((Fl_Callback*)cb_valinp_area_size_cm_w);
              valinp_area_size_cm_w->when(FL_WHEN_RELEASE);
            } // Fl_Value_Input* valinp_area_size_cm_w
            { valinp_area_size_cm_h = new Fl_Value_Input(100, 220, 55, 25, "\351\253\230");
              valinp_area_size_cm_h->box(FL_BORDER_BOX);
              valinp_area_size_cm_h->maximum(60);
              valinp_area_size_cm_h->callback((Fl_Callback*)cb_valinp_area_size_cm_h);
              valinp_area_size_cm_h->when(FL_WHEN_RELEASE);
            } // Fl_Value_Input* valinp_area_size_cm_h
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(5, 250, 150, 25);
            o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
            { valinp_area_size_pixel_w = new Fl_Value_Input(25, 250, 55, 25, "\345\271\205");
              valinp_area_size_pixel_w->box(FL_BORDER_BOX);
              valinp_area_size_pixel_w->maximum(10000);
              valinp_area_size_pixel_w->callback((Fl_Callback*)cb_valinp_area_size_pixel_w);
              valinp_area_size_pixel_w->when(FL_WHEN_RELEASE);
            } // Fl_Value_Input* valinp_area_size_pixel_w
            { valinp_area_size_pixel_h = new Fl_Value_Input(100, 250, 55, 25, "\351\253\230");
              valinp_area_size_pixel_h->box(FL_BORDER_BOX);
              valinp_area_size_pixel_h->maximum(10000);
              valinp_area_size_pixel_h->callback((Fl_Callback*)cb_valinp_area_size_pixel_h);
              valinp_area_size_pixel_h->when(FL_WHEN_RELEASE);
            } // Fl_Value_Input* valinp_area_size_pixel_h
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(155, 220, 35, 55);
            o->align(Fl_Align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE));
            { radbut_area_reso_fix_cm = new Fl_Button(155, 220, 35, 25, "cm");
              radbut_area_reso_fix_cm->type(102);
            } // Fl_Button* radbut_area_reso_fix_cm
            { radbut_area_reso_fix_pixel = new Fl_Button(155, 250, 35, 25, "pixel");
              radbut_area_reso_fix_pixel->type(102);
              radbut_area_reso_fix_pixel->value(1);
            } // Fl_Button* radbut_area_reso_fix_pixel
            o->end();
          } // Fl_Group* o
          o->end();
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(75, 195, 120, 20, "\347\270\246\346\250\252\346\257\224\343\202\273\343\203\203\343\203\210...");
          o->callback((Fl_Callback*)cb_f);
        } // Fl_Button* o
        group_area_crop->end();
      } // Fl_Group* group_area_crop
      { Fl_Button* o = new Fl_Button(75, 125, 80, 20, "\346\234\200\345\244\247\343\202\273\343\203\203\343\203\210");
        o->callback((Fl_Callback*)cb_10);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 310, 198, 41, "Scanner");
      o->box(FL_BORDER_FRAME);
      o->color((Fl_Color)41);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { txtout_scanner_type = new Fl_Output(2, 310, 196, 20);
        txtout_scanner_type->box(FL_NO_BOX);
        txtout_scanner_type->color(FL_BACKGROUND_COLOR);
        txtout_scanner_type->textsize(13);
      } // Fl_Output* txtout_scanner_type
      { Fl_Group* o = new Fl_Group(2, 330, 196, 20);
        o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        { valout_scanner_size_cm_w = new Fl_Value_Output(30, 330, 55, 20, "W");
          valout_scanner_size_cm_w->box(FL_FLAT_BOX);
          valout_scanner_size_cm_w->maximum(60);
        } // Fl_Value_Output* valout_scanner_size_cm_w
        { valout_scanner_size_cm_h = new Fl_Value_Output(100, 330, 55, 20, "H");
          valout_scanner_size_cm_h->box(FL_FLAT_BOX);
          valout_scanner_size_cm_h->maximum(60);
        } // Fl_Value_Output* valout_scanner_size_cm_h
        { Fl_Text_Display* o = new Fl_Text_Display(165, 332, 0, 0, "cm");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    window_area_and_rot90->set_non_modal();
    window_area_and_rot90->end();
  } // Fl_Double_Window* window_area_and_rot90
  { window_pixel_type_and_bright = new Fl_Double_Window(200, 220, "\347\224\273\345\203\217\343\202\277\343\202\244\343\203\227\343\201\250\346\
\230\216\343\202\213\343\201\225");
    window_pixel_type_and_bright->callback((Fl_Callback*)cb_window_pixel_type_and_bright, (void*)(this));
    { Fl_Group* o = new Fl_Group(0, 5, 200, 25);
      { button_pixel_type_and_bright = new fltk_button_pixel_type_and_bright(5, 5, 130, 25, "\343\201\223\343\201\223\343\201\256\350\250\255\345\256\232\343\202\222\345\
\206\215\347\217\276...");
        button_pixel_type_and_bright->box(FL_UP_BOX);
        button_pixel_type_and_bright->color(FL_BACKGROUND_COLOR);
        button_pixel_type_and_bright->selection_color(FL_BACKGROUND_COLOR);
        button_pixel_type_and_bright->labeltype(FL_NORMAL_LABEL);
        button_pixel_type_and_bright->labelfont(0);
        button_pixel_type_and_bright->labelsize(14);
        button_pixel_type_and_bright->labelcolor(FL_FOREGROUND_COLOR);
        button_pixel_type_and_bright->callback((Fl_Callback*)cb_button_pixel_type_and_bright);
        button_pixel_type_and_bright->align(Fl_Align(FL_ALIGN_CENTER));
        button_pixel_type_and_bright->when(FL_WHEN_RELEASE);
      } // fltk_button_pixel_type_and_bright* button_pixel_type_and_bright
      { Fl_Box* o = new Fl_Box(135, 5, 65, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 35, 200, 25);
      { new Fl_Box(0, 35, 75, 25);
      } // Fl_Box* o
      { choice_pixel_type = new Fl_Choice(75, 35, 110, 25, "\347\224\273\345\203\217\343\202\277\343\202\244\343\203\227");
        choice_pixel_type->box(FL_BORDER_BOX);
        choice_pixel_type->down_box(FL_BORDER_BOX);
        choice_pixel_type->callback((Fl_Callback*)cb_choice_pixel_type);
        choice_pixel_type->menu(menu_choice_pixel_type);
      } // Fl_Choice* choice_pixel_type
      { Fl_Box* o = new Fl_Box(185, 35, 15, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { group_bw = new Fl_Group(0, 80, 200, 110);
      { Fl_Group* o = new Fl_Group(0, 80, 200, 25);
        { valinp_bw_threshold = new Fl_Value_Input(5, 80, 35, 25);
          valinp_bw_threshold->box(FL_BORDER_BOX);
          valinp_bw_threshold->maximum(255);
          valinp_bw_threshold->value(180);
          valinp_bw_threshold->callback((Fl_Callback*)cb_valinp_bw_threshold);
        } // Fl_Value_Input* valinp_bw_threshold
        { scrbar_bw_threshold = new Fl_Scrollbar(45, 85, 150, 20, "\347\231\275\351\273\222\343\201\227\343\201\215\343\201\204\345\200\244");
          scrbar_bw_threshold->type(1);
          scrbar_bw_threshold->box(FL_BORDER_BOX);
          scrbar_bw_threshold->maximum(255);
          scrbar_bw_threshold->Fl_Slider::value(180);
          scrbar_bw_threshold->callback((Fl_Callback*)cb_scrbar_bw_threshold);
          scrbar_bw_threshold->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_bw_threshold);
          scrbar_bw_threshold->linesize(1);
        } // Fl_Scrollbar* scrbar_bw_threshold
        o->end();
        Fl_Group::current()->resizable(o);
      } // Fl_Group* o
      group_bw->end();
    } // Fl_Group* group_bw
    { group_grays = new Fl_Group(0, 80, 200, 110);
      group_grays->hide();
      { Fl_Group* o = new Fl_Group(0, 80, 200, 25);
        { valinp_grayscale_brightness = new Fl_Value_Input(5, 80, 45, 25);
          valinp_grayscale_brightness->box(FL_BORDER_BOX);
          valinp_grayscale_brightness->minimum(-1000);
          valinp_grayscale_brightness->maximum(1000);
          valinp_grayscale_brightness->callback((Fl_Callback*)cb_valinp_grayscale_brightness);
        } // Fl_Value_Input* valinp_grayscale_brightness
        { scrbar_grayscale_brightness = new Fl_Scrollbar(55, 85, 140, 20, "\346\230\216\343\202\213\343\201\225");
          scrbar_grayscale_brightness->type(1);
          scrbar_grayscale_brightness->box(FL_BORDER_BOX);
          scrbar_grayscale_brightness->minimum(-1000);
          scrbar_grayscale_brightness->maximum(1000);
          scrbar_grayscale_brightness->callback((Fl_Callback*)cb_scrbar_grayscale_brightness);
          scrbar_grayscale_brightness->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_grayscale_brightness);
          scrbar_grayscale_brightness->linesize(1);
        } // Fl_Scrollbar* scrbar_grayscale_brightness
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 120, 200, 25);
        { valinp_grayscale_contrast = new Fl_Value_Input(5, 120, 45, 25);
          valinp_grayscale_contrast->box(FL_BORDER_BOX);
          valinp_grayscale_contrast->minimum(-1000);
          valinp_grayscale_contrast->maximum(1000);
          valinp_grayscale_contrast->callback((Fl_Callback*)cb_valinp_grayscale_contrast);
        } // Fl_Value_Input* valinp_grayscale_contrast
        { scrbar_grayscale_contrast = new Fl_Scrollbar(55, 125, 140, 20, "\343\202\263\343\203\263\343\203\210\343\203\251\343\202\271\343\203\210");
          scrbar_grayscale_contrast->type(1);
          scrbar_grayscale_contrast->box(FL_BORDER_BOX);
          scrbar_grayscale_contrast->minimum(-1000);
          scrbar_grayscale_contrast->maximum(1000);
          scrbar_grayscale_contrast->callback((Fl_Callback*)cb_scrbar_grayscale_contrast);
          scrbar_grayscale_contrast->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_grayscale_contrast);
          scrbar_grayscale_contrast->linesize(1);
        } // Fl_Scrollbar* scrbar_grayscale_contrast
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 160, 200, 25);
        { valinp_grayscale_gamma = new Fl_Value_Input(5, 160, 45, 25);
          valinp_grayscale_gamma->box(FL_BORDER_BOX);
          valinp_grayscale_gamma->minimum(0.5);
          valinp_grayscale_gamma->maximum(5);
          valinp_grayscale_gamma->value(1);
          valinp_grayscale_gamma->callback((Fl_Callback*)cb_valinp_grayscale_gamma);
        } // Fl_Value_Input* valinp_grayscale_gamma
        { scrbar_grayscale_gamma = new Fl_Scrollbar(55, 165, 140, 20, "\343\202\254\343\203\263\343\203\236");
          scrbar_grayscale_gamma->type(1);
          scrbar_grayscale_gamma->box(FL_BORDER_BOX);
          scrbar_grayscale_gamma->minimum(0.5);
          scrbar_grayscale_gamma->maximum(5);
          scrbar_grayscale_gamma->step(0.01);
          scrbar_grayscale_gamma->Fl_Slider::value(1);
          scrbar_grayscale_gamma->callback((Fl_Callback*)cb_scrbar_grayscale_gamma);
          scrbar_grayscale_gamma->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_grayscale_gamma);
          scrbar_grayscale_gamma->linesize(1);
        } // Fl_Scrollbar* scrbar_grayscale_gamma
        o->end();
      } // Fl_Group* o
      group_grays->end();
    } // Fl_Group* group_grays
    { group_rgb = new Fl_Group(0, 80, 200, 110);
      group_rgb->hide();
      { Fl_Group* o = new Fl_Group(0, 80, 200, 25);
        { valinp_rgb_brightness = new Fl_Value_Input(5, 80, 45, 25);
          valinp_rgb_brightness->box(FL_BORDER_BOX);
          valinp_rgb_brightness->minimum(-1000);
          valinp_rgb_brightness->maximum(1000);
          valinp_rgb_brightness->callback((Fl_Callback*)cb_valinp_rgb_brightness);
        } // Fl_Value_Input* valinp_rgb_brightness
        { scrbar_rgb_brightness = new Fl_Scrollbar(55, 85, 140, 20, "\346\230\216\343\202\213\343\201\225");
          scrbar_rgb_brightness->type(1);
          scrbar_rgb_brightness->box(FL_BORDER_BOX);
          scrbar_rgb_brightness->minimum(-1000);
          scrbar_rgb_brightness->maximum(1000);
          scrbar_rgb_brightness->callback((Fl_Callback*)cb_scrbar_rgb_brightness);
          scrbar_rgb_brightness->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_rgb_brightness);
          scrbar_rgb_brightness->linesize(1);
        } // Fl_Scrollbar* scrbar_rgb_brightness
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 120, 200, 25);
        { valinp_rgb_contrast = new Fl_Value_Input(5, 120, 45, 25);
          valinp_rgb_contrast->box(FL_BORDER_BOX);
          valinp_rgb_contrast->minimum(-1000);
          valinp_rgb_contrast->maximum(1000);
          valinp_rgb_contrast->callback((Fl_Callback*)cb_valinp_rgb_contrast);
        } // Fl_Value_Input* valinp_rgb_contrast
        { scrbar_rgb_contrast = new Fl_Scrollbar(55, 125, 140, 20, "\343\202\263\343\203\263\343\203\210\343\203\251\343\202\271\343\203\210");
          scrbar_rgb_contrast->type(1);
          scrbar_rgb_contrast->box(FL_BORDER_BOX);
          scrbar_rgb_contrast->minimum(-1000);
          scrbar_rgb_contrast->maximum(1000);
          scrbar_rgb_contrast->callback((Fl_Callback*)cb_scrbar_rgb_contrast);
          scrbar_rgb_contrast->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_rgb_contrast);
          scrbar_rgb_contrast->linesize(1);
        } // Fl_Scrollbar* scrbar_rgb_contrast
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 160, 200, 25);
        { valinp_rgb_gamma = new Fl_Value_Input(5, 160, 45, 25);
          valinp_rgb_gamma->box(FL_BORDER_BOX);
          valinp_rgb_gamma->minimum(0.5);
          valinp_rgb_gamma->maximum(5);
          valinp_rgb_gamma->value(1);
          valinp_rgb_gamma->callback((Fl_Callback*)cb_valinp_rgb_gamma);
        } // Fl_Value_Input* valinp_rgb_gamma
        { scrbar_rgb_gamma = new Fl_Scrollbar(55, 165, 140, 20, "\343\202\254\343\203\263\343\203\236");
          scrbar_rgb_gamma->type(1);
          scrbar_rgb_gamma->box(FL_BORDER_BOX);
          scrbar_rgb_gamma->minimum(0.5);
          scrbar_rgb_gamma->maximum(5);
          scrbar_rgb_gamma->step(0.01);
          scrbar_rgb_gamma->Fl_Slider::value(1);
          scrbar_rgb_gamma->callback((Fl_Callback*)cb_scrbar_rgb_gamma);
          scrbar_rgb_gamma->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          Fl_Group::current()->resizable(scrbar_rgb_gamma);
          scrbar_rgb_gamma->linesize(1);
        } // Fl_Scrollbar* scrbar_rgb_gamma
        o->end();
      } // Fl_Group* o
      group_rgb->end();
    } // Fl_Group* group_rgb
    { Fl_Group* o = new Fl_Group(0, 190, 200, 25);
      { Fl_Box* o = new Fl_Box(0, 190, 95, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { button_preview_scan = new Fl_Button(95, 190, 100, 25, "\347\242\272\350\252\215\343\202\271\343\202\255\343\203\243\343\203\263");
        button_preview_scan->callback((Fl_Callback*)cb_button_preview_scan);
      } // Fl_Button* button_preview_scan
      o->end();
    } // Fl_Group* o
    window_pixel_type_and_bright->set_non_modal();
    window_pixel_type_and_bright->size_range(200, 220, 1000, 220);
    window_pixel_type_and_bright->end();
    window_pixel_type_and_bright->resizable(window_pixel_type_and_bright);
  } // Fl_Double_Window* window_pixel_type_and_bright
  { window_scan_and_save = new Fl_Double_Window(200, 330, "\351\200\243\347\225\252\343\202\271\343\202\255\343\203\243\343\203\263\343\
\201\250\344\277\235\345\255\230");
    window_scan_and_save->callback((Fl_Callback*)cb_window_scan_and_save, (void*)(this));
    { Fl_Group* o = new Fl_Group(1, 20, 198, 65, "\345\207\246\347\220\206");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 25, 198, 25);
        { chkbtn_scan_filter_trace_sw = new Fl_Check_Button(5, 25, 130, 25, "2\345\200\244\345\214\226");
          chkbtn_scan_filter_trace_sw->down_box(FL_DOWN_BOX);
          chkbtn_scan_filter_trace_sw->value(1);
          chkbtn_scan_filter_trace_sw->callback((Fl_Callback*)cb_chkbtn_scan_filter_trace_sw);
        } // Fl_Check_Button* chkbtn_scan_filter_trace_sw
        { Fl_Box* o = new Fl_Box(135, 25, 64, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 55, 198, 25);
        { chkbtn_scan_filter_erase_dot_noise_sw = new Fl_Check_Button(5, 55, 130, 25, "\343\203\211\343\203\203\343\203\210\343\203\216\343\202\244\343\202\272\351\
\231\244\345\216\273");
          chkbtn_scan_filter_erase_dot_noise_sw->down_box(FL_DOWN_BOX);
          chkbtn_scan_filter_erase_dot_noise_sw->callback((Fl_Callback*)cb_chkbtn_scan_filter_erase_dot_noise_sw);
        } // Fl_Check_Button* chkbtn_scan_filter_erase_dot_noise_sw
        { Fl_Box* o = new Fl_Box(135, 55, 64, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 105, 198, 75, "\344\277\235\345\255\230");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 110, 198, 35);
        { filinp_scan_save_dir_path = new Fl_File_Input(50, 110, 130, 35, "\343\203\225\343\202\251\343\203\253\343\203\200");
          filinp_scan_save_dir_path->callback((Fl_Callback*)cb_filinp_scan_save_dir_path);
          filinp_scan_save_dir_path->when(FL_WHEN_CHANGED);
          Fl_Group::current()->resizable(filinp_scan_save_dir_path);
        } // Fl_File_Input* filinp_scan_save_dir_path
        { Fl_Button* o = new Fl_Button(180, 120, 15, 24, "...");
          o->callback((Fl_Callback*)cb_12);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 150, 198, 25);
        { new Fl_Box(1, 150, 49, 25);
        } // Fl_Box* o
        { strinp_scan_save_file_head = new Fl_Input(50, 150, 50, 25, "\343\203\225\343\202\241\343\202\244\343\203\253");
          strinp_scan_save_file_head->box(FL_BORDER_BOX);
          strinp_scan_save_file_head->callback((Fl_Callback*)cb_strinp_scan_save_file_head);
          strinp_scan_save_file_head->when(FL_WHEN_CHANGED);
          Fl_Group::current()->resizable(strinp_scan_save_file_head);
        } // Fl_Input* strinp_scan_save_file_head
        { Fl_Output* o = output_scan_save_number_format = new Fl_Output(100, 150, 45, 25);
          output_scan_save_number_format->box(FL_BORDER_BOX);
          output_scan_save_number_format->callback((Fl_Callback*)cb_output_scan_save_number_format);
          o->value(".0000");
        } // Fl_Output* output_scan_save_number_format
        { choice_scan_save_image_format = new Fl_Choice(145, 150, 54, 25);
          choice_scan_save_image_format->box(FL_BORDER_BOX);
          choice_scan_save_image_format->down_box(FL_BORDER_BOX);
          choice_scan_save_image_format->callback((Fl_Callback*)cb_choice_scan_save_image_format);
        } // Fl_Choice* choice_scan_save_image_format
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 200, 198, 95, "\351\200\243\347\225\252");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 205, 198, 25);
        { new Fl_Box(1, 205, 84, 25);
        } // Fl_Box* o
        { valinp_scan_num_start = new Fl_Value_Input(85, 205, 50, 25, "\351\226\213\345\247\213\347\225\252\345\217\267");
          valinp_scan_num_start->box(FL_BORDER_BOX);
          valinp_scan_num_start->minimum(1);
          valinp_scan_num_start->maximum(9999);
          valinp_scan_num_start->value(1);
        } // Fl_Value_Input* valinp_scan_num_start
        { Fl_Box* o = new Fl_Box(135, 205, 64, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 235, 198, 25);
        { choice_scan_num_continue_type = new Fl_Choice(5, 235, 80, 25);
          choice_scan_num_continue_type->box(FL_BORDER_BOX);
          choice_scan_num_continue_type->down_box(FL_BORDER_BOX);
          choice_scan_num_continue_type->callback((Fl_Callback*)cb_choice_scan_num_continue_type);
          choice_scan_num_continue_type->menu(menu_choice_scan_num_continue_type);
        } // Fl_Choice* choice_scan_num_continue_type
        { choice_scan_num_endless_direction = new Fl_Choice(85, 235, 50, 25);
          choice_scan_num_endless_direction->box(FL_BORDER_BOX);
          choice_scan_num_endless_direction->down_box(FL_BORDER_BOX);
          choice_scan_num_endless_direction->menu(menu_choice_scan_num_endless_direction);
        } // Fl_Choice* choice_scan_num_endless_direction
        { valinp_scan_num_end = new Fl_Value_Input(85, 235, 50, 25);
          valinp_scan_num_end->box(FL_BORDER_BOX);
          valinp_scan_num_end->minimum(1);
          valinp_scan_num_end->maximum(9999);
          valinp_scan_num_end->value(1);
        } // Fl_Value_Input* valinp_scan_num_end
        { Fl_Box* o = new Fl_Box(135, 235, 64, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 265, 198, 25);
        { Fl_Box* o = new Fl_Box(1, 265, 109, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { Fl_Button* o = new Fl_Button(110, 265, 85, 25, "\351\200\243\347\225\252\343\202\273\343\203\203\343\203\210");
          o->callback((Fl_Callback*)cb_13);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 300, 198, 25);
      { chkbtn_scan_adjustable_per_frame_sw = new Fl_Check_Button(5, 300, 85, 25, "\345\244\211\346\233\264\345\217\257\343\201\247");
        chkbtn_scan_adjustable_per_frame_sw->down_box(FL_DOWN_BOX);
      } // Fl_Check_Button* chkbtn_scan_adjustable_per_frame_sw
      { Fl_Box* o = new Fl_Box(90, 300, 5, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { button_scan_save = new Fl_Button(95, 300, 100, 25, "\351\226\213\345\247\213");
        button_scan_save->tooltip("Scan and Save Files");
        button_scan_save->callback((Fl_Callback*)cb_button_scan_save);
      } // Fl_Button* button_scan_save
      o->end();
    } // Fl_Group* o
    window_scan_and_save->set_non_modal();
    window_scan_and_save->size_range(200, 330, 1000, 330);
    window_scan_and_save->end();
    window_scan_and_save->resizable(window_scan_and_save);
  } // Fl_Double_Window* window_scan_and_save
  { window_trace_files = new Fl_Double_Window(200, 385, "\351\200\243\347\225\252\343\203\225\343\202\241\343\202\244\343\203\253""2\
\345\200\244\345\214\226");
    window_trace_files->callback((Fl_Callback*)cb_window_trace_files, (void*)(this));
    { Fl_Group* o = new Fl_Group(1, 20, 198, 125, "\351\226\213\343\201\217");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 25, 198, 70);
        { Fl_Group* o = new Fl_Group(1, 25, 183, 65);
          { Fl_Group* o = new Fl_Group(1, 25, 183, 35);
            { new Fl_Box(1, 25, 49, 35);
            } // Fl_Box* o
            { filinp_trace_open_dir_path = new Fl_File_Input(50, 25, 134, 35, "\343\203\225\343\202\251\343\203\253\343\203\200");
              filinp_trace_open_dir_path->box(FL_BORDER_BOX);
              filinp_trace_open_dir_path->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(filinp_trace_open_dir_path);
            } // Fl_File_Input* filinp_trace_open_dir_path
            o->end();
          } // Fl_Group* o
          { Fl_Group* o = new Fl_Group(1, 65, 183, 25);
            { new Fl_Box(1, 65, 49, 25);
            } // Fl_Box* o
            { strinp_trace_open_file_head = new Fl_Input(50, 65, 35, 25, "\343\203\225\343\202\241\343\202\244\343\203\253");
              strinp_trace_open_file_head->box(FL_BORDER_BOX);
              strinp_trace_open_file_head->when(FL_WHEN_CHANGED);
              Fl_Group::current()->resizable(strinp_trace_open_file_head);
            } // Fl_Input* strinp_trace_open_file_head
            { strinp_trace_open_number_format = new Fl_Input(85, 65, 45, 25);
              strinp_trace_open_number_format->box(FL_BORDER_BOX);
            } // Fl_Input* strinp_trace_open_number_format
            { choice_trace_open_image_format = new Fl_Choice(130, 65, 54, 25);
              choice_trace_open_image_format->box(FL_BORDER_BOX);
              choice_trace_open_image_format->down_box(FL_BORDER_BOX);
            } // Fl_Choice* choice_trace_open_image_format
            o->end();
          } // Fl_Group* o
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        { Fl_Button* o = new Fl_Button(184, 35, 14, 55, "...");
          o->callback((Fl_Callback*)cb_14);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 95, 198, 45);
        { Fl_Box* o = new Fl_Box(1, 95, 109, 45);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { Fl_Button* o = new Fl_Button(110, 95, 85, 20, "\343\203\252\343\203\215\343\203\274\343\203\240...");
          o->tooltip("Rename");
          o->callback((Fl_Callback*)cb_15);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(110, 120, 85, 20, "\343\203\252\343\203\212\343\203\263\343\203\220\343\203\274...");
          o->tooltip("Renumber");
          o->callback((Fl_Callback*)cb_16);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 165, 198, 35, "\345\207\246\347\220\206");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 175, 198, 25);
        o->hide();
        { chkbtn_trace_filter_trace_sw = new Fl_Check_Button(5, 175, 130, 25, "Trace");
          chkbtn_trace_filter_trace_sw->box(FL_SHADOW_BOX);
          chkbtn_trace_filter_trace_sw->down_box(FL_DOWN_BOX);
          chkbtn_trace_filter_trace_sw->value(1);
          chkbtn_trace_filter_trace_sw->callback((Fl_Callback*)cb_chkbtn_trace_filter_trace_sw);
        } // Fl_Check_Button* chkbtn_trace_filter_trace_sw
        { Fl_Box* o = new Fl_Box(135, 175, 64, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 170, 198, 25);
        { chkbtn_trace_filter_erase_dot_noise_sw = new Fl_Check_Button(5, 170, 130, 25, "\343\203\211\343\203\203\343\203\210\343\203\216\343\202\244\343\202\272\351\
\231\244\345\216\273");
          chkbtn_trace_filter_erase_dot_noise_sw->down_box(FL_DOWN_BOX);
          chkbtn_trace_filter_erase_dot_noise_sw->callback((Fl_Callback*)cb_chkbtn_trace_filter_erase_dot_noise_sw);
        } // Fl_Check_Button* chkbtn_trace_filter_erase_dot_noise_sw
        { Fl_Box* o = new Fl_Box(135, 170, 64, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 220, 198, 75, "\344\277\235\345\255\230");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 225, 198, 35);
        { new Fl_Box(1, 225, 49, 35);
        } // Fl_Box* o
        { filinp_trace_save_dir_path = new Fl_File_Input(50, 225, 134, 35, "\343\203\225\343\202\251\343\203\253\343\203\200");
          filinp_trace_save_dir_path->box(FL_BORDER_BOX);
          filinp_trace_save_dir_path->callback((Fl_Callback*)cb_filinp_trace_save_dir_path);
          filinp_trace_save_dir_path->when(FL_WHEN_CHANGED);
          Fl_Group::current()->resizable(filinp_trace_save_dir_path);
        } // Fl_File_Input* filinp_trace_save_dir_path
        { Fl_Button* o = new Fl_Button(184, 235, 15, 25, "...");
          o->callback((Fl_Callback*)cb_17);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 265, 198, 25);
        { new Fl_Box(1, 265, 49, 25);
        } // Fl_Box* o
        { strinp_trace_save_file_head = new Fl_Input(50, 265, 50, 25, "\343\203\225\343\202\241\343\202\244\343\203\253");
          strinp_trace_save_file_head->box(FL_BORDER_BOX);
          strinp_trace_save_file_head->callback((Fl_Callback*)cb_strinp_trace_save_file_head);
          strinp_trace_save_file_head->when(FL_WHEN_CHANGED);
          Fl_Group::current()->resizable(strinp_trace_save_file_head);
        } // Fl_Input* strinp_trace_save_file_head
        { Fl_Output* o = output_trace_save_number_format = new Fl_Output(100, 265, 45, 25);
          output_trace_save_number_format->box(FL_BORDER_BOX);
          output_trace_save_number_format->callback((Fl_Callback*)cb_output_trace_save_number_format);
          o->value(".0000");
        } // Fl_Output* output_trace_save_number_format
        { choice_trace_save_image_format = new Fl_Choice(145, 265, 54, 25);
          choice_trace_save_image_format->box(FL_BORDER_BOX);
          choice_trace_save_image_format->down_box(FL_BORDER_BOX);
          choice_trace_save_image_format->callback((Fl_Callback*)cb_choice_trace_save_image_format);
        } // Fl_Choice* choice_trace_save_image_format
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 315, 198, 35, "\351\200\243\347\225\252");
      o->box(FL_BORDER_BOX);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Group* o = new Fl_Group(1, 320, 198, 25);
        { valout_trace_num_start = new Fl_Value_Output(21, 320, 40, 25, "\345\247\213");
          valout_trace_num_start->box(FL_BORDER_BOX);
        } // Fl_Value_Output* valout_trace_num_start
        { valout_trace_num_end = new Fl_Value_Output(79, 320, 40, 25, "\347\265\202");
          valout_trace_num_end->box(FL_BORDER_BOX);
        } // Fl_Value_Output* valout_trace_num_end
        { Fl_Box* o = new Fl_Box(119, 320, 1, 25);
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { Fl_Button* o = new Fl_Button(120, 320, 75, 25, "\351\200\243\347\225\252\343\202\273\343\203\203\343\203\210");
          o->callback((Fl_Callback*)cb_18);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(1, 355, 198, 25);
      { Fl_Box* o = new Fl_Box(1, 355, 94, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(95, 355, 100, 25, "\345\256\237\350\241\214");
        o->tooltip("Trace and Save Files");
        o->callback((Fl_Callback*)cb_19);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    window_trace_files->set_non_modal();
    window_trace_files->size_range(200, 385, 1000, 385);
    window_trace_files->end();
    window_trace_files->resizable(window_trace_files);
  } // Fl_Double_Window* window_trace_files
  { window_number = new Fl_Double_Window(116, 350, "\345\256\237\350\241\214\347\225\252\345\217\267");
    window_number->callback((Fl_Callback*)cb_window_number, (void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 116, 25);
      o->menu(menu_1);
    } // Fl_Menu_Bar* o
    { norinp_number_input = new Fl_Input(0, 25, 116, 25);
      norinp_number_input->box(FL_BORDER_BOX);
      norinp_number_input->callback((Fl_Callback*)cb_norinp_number_input);
      norinp_number_input->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      norinp_number_input->when(FL_WHEN_ENTER_KEY);
    } // Fl_Input* norinp_number_input
    { Fl_Group* o = new Fl_Group(0, 50, 116, 25);
      { new Fl_Box(0, 50, 50, 25);
      } // Fl_Box* o
      { output_number_action_type = new Fl_Output(50, 50, 66, 25, "\345\213\225\344\275\234\345\220\215");
        output_number_action_type->box(FL_BORDER_BOX);
        Fl_Group::current()->resizable(output_number_action_type);
      } // Fl_Output* output_number_action_type
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 75, 116, 25);
      { new Fl_Box(0, 75, 50, 25);
      } // Fl_Box* o
      { output_number_file_head_name = new Fl_Output(50, 75, 66, 25, "\344\277\235\345\255\230\345\220\215");
        output_number_file_head_name->box(FL_BORDER_BOX);
        Fl_Group::current()->resizable(output_number_file_head_name);
      } // Fl_Output* output_number_file_head_name
      o->end();
    } // Fl_Group* o
    { selbro_number_list = new Fl_Browser(0, 100, 116, 250);
      selbro_number_list->type(3);
      selbro_number_list->box(FL_BORDER_BOX);
      selbro_number_list->callback((Fl_Callback*)cb_selbro_number_list);
      Fl_Group::current()->resizable(selbro_number_list);
    } // Fl_Browser* selbro_number_list
    window_number->set_non_modal();
    window_number->size_range(116, 0, 200, 4000);
    window_number->end();
  } // Fl_Double_Window* window_number
  { window_trace_batch = new Fl_Double_Window(300, 185, "2\345\200\244\345\214\226\343\203\220\343\203\203\343\203\201");
    window_trace_batch->callback((Fl_Callback*)cb_window_trace_batch, (void*)(this));
    { Fl_Group* o = new Fl_Group(0, 4, 300, 30);
      { Fl_Button* o = new Fl_Button(5, 5, 40, 25, "\350\277\275\345\212\240...");
        o->callback((Fl_Callback*)cb_1c);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(55, 5, 45, 25, "\344\270\212\343\201\270");
        o->callback((Fl_Callback*)cb_1d);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(105, 5, 45, 25, "\344\270\213\343\201\270");
        o->callback((Fl_Callback*)cb_1e);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(160, 5, 45, 25, "\345\211\212\351\231\244");
        o->callback((Fl_Callback*)cb_1f);
      } // Fl_Button* o
      { Fl_Box* o = new Fl_Box(205, 5, 60, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(265, 5, 30, 25, "\345\256\237\350\241\214");
        o->callback((Fl_Callback*)cb_20);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 35, 300, 150);
      { selbro_trace_batch_config_list = new Fl_Browser(0, 35, 300, 150);
        selbro_trace_batch_config_list->type(3);
        selbro_trace_batch_config_list->box(FL_BORDER_BOX);
        Fl_Group::current()->resizable(selbro_trace_batch_config_list);
      } // Fl_Browser* selbro_trace_batch_config_list
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    window_trace_batch->set_non_modal();
    window_trace_batch->size_range(240, 30);
    window_trace_batch->end();
  } // Fl_Double_Window* window_trace_batch
  { window_trace_params = new Fl_Double_Window(465, 250, "2\345\200\244\345\214\226\350\252\277\346\225\264");
    window_trace_params->callback((Fl_Callback*)cb_window_trace_params, (void*)(this));
    { group_trace_params = new Fl_Group(0, 0, 465, 250);
      { button_trace_params = new fltk_button_trace_params(5, 5, 130, 25, "\343\201\223\343\201\223\343\201\256\350\250\255\345\256\232\343\202\222\345\
\206\215\347\217\276...");
        button_trace_params->box(FL_UP_BOX);
        button_trace_params->color(FL_BACKGROUND_COLOR);
        button_trace_params->selection_color(FL_BACKGROUND_COLOR);
        button_trace_params->labeltype(FL_NORMAL_LABEL);
        button_trace_params->labelfont(0);
        button_trace_params->labelsize(14);
        button_trace_params->labelcolor(FL_FOREGROUND_COLOR);
        button_trace_params->callback((Fl_Callback*)cb_button_trace_params);
        button_trace_params->align(Fl_Align(FL_ALIGN_CENTER));
        button_trace_params->when(FL_WHEN_RELEASE);
      } // fltk_button_trace_params* button_trace_params
      { Fl_Button* o = new Fl_Button(175, 5, 20, 20);
        o->type(1);
        o->value(1);
        o->image( image_icon_open_close_right() );
        o->callback((Fl_Callback*)cb_22);
      } // Fl_Button* o
      { togbut_trace_open_under_sw = new Fl_Button(205, 5, 20, 20);
        togbut_trace_open_under_sw->type(1);
        togbut_trace_open_under_sw->value(1);
        togbut_trace_open_under_sw->image( image_icon_open_close_under() );
        togbut_trace_open_under_sw->callback((Fl_Callback*)cb_togbut_trace_open_under_sw);
      } // Fl_Button* togbut_trace_open_under_sw
      { togbut_trace_open_right_middle_sw = new Fl_Button(367, 5, 15, 15);
        togbut_trace_open_right_middle_sw->type(1);
        togbut_trace_open_right_middle_sw->value(1);
        togbut_trace_open_right_middle_sw->image( image_icon_open_close_right_11x11() );
        togbut_trace_open_right_middle_sw->callback((Fl_Callback*)cb_togbut_trace_open_right_middle_sw);
      } // Fl_Button* togbut_trace_open_right_middle_sw
      { chebut_trace_display_target_sw = new Fl_Check_Button(325, 5, 17, 25, "Target");
        chebut_trace_display_target_sw->down_box(FL_DOWN_BOX);
        chebut_trace_display_target_sw->callback((Fl_Callback*)cb_chebut_trace_display_target_sw);
        chebut_trace_display_target_sw->align(Fl_Align(FL_ALIGN_LEFT));
        chebut_trace_display_target_sw->hide();
      } // Fl_Check_Button* chebut_trace_display_target_sw
      { chebut_trace_display_main_sw = new Fl_Check_Button(365, 20, 17, 20, "\347\257\204\345\233\262\345\206\205\345\244\226\345\214\272\345\210\206\343\
\201\221\342\206\222");
        chebut_trace_display_main_sw->down_box(FL_DOWN_BOX);
        chebut_trace_display_main_sw->callback((Fl_Callback*)cb_chebut_trace_display_main_sw);
        chebut_trace_display_main_sw->align(Fl_Align(FL_ALIGN_LEFT_TOP));
      } // Fl_Check_Button* chebut_trace_display_main_sw
      { Fl_Group* o = new Fl_Group(0, 34, 450, 31);
        { Fl_Text_Display* o = new Fl_Text_Display(22, 45, 0, 0, "\350\211\262");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(50, 45, 0, 0, "|----------- \345\244\252\343\201\225 -----------|");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(213, 53, 0, 0, "\344\270\212\344\270\213\346\217\233");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(229, 63, 0, 0, "\342\206\223");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(265, 35, 0, 0, "|---- \350\211\262\347\233\270 ----|");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(250, 48, 0, 0, "ed.");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
          o->hide();
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(265, 48, 0, 0, "\346\234\200\345\260\217");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(300, 48, 0, 0, "\346\234\200\345\244\247");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(335, 48, 0, 0, "\347\267\250");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(365, 45, 0, 0, "\347\244\272");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(390, 35, 0, 0, "\345\202\276\346\226\234");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(393, 48, 0, 0, "\342\206\223");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        { Fl_Text_Display* o = new Fl_Text_Display(422, 48, 0, 0, "\345\210\207\347\211\207");
          o->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Text_Display* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 65, 465, 25);
        { chebut_trace_0_enable_sw = new Fl_Check_Button(2, 65, 17, 25);
          chebut_trace_0_enable_sw->down_box(FL_DOWN_BOX);
          chebut_trace_0_enable_sw->value(1);
          chebut_trace_0_enable_sw->callback((Fl_Callback*)cb_chebut_trace_0_enable_sw);
          chebut_trace_0_enable_sw->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* chebut_trace_0_enable_sw
        { group_trace_0 = new Fl_Group(0, 65, 465, 25);
          { button_trace_0_target_rgb = new Fl_Button(23, 65, 25, 25);
            button_trace_0_target_rgb->color((Fl_Color)16);
            button_trace_0_target_rgb->callback((Fl_Callback*)cb_button_trace_0_target_rgb);
          } // Fl_Button* button_trace_0_target_rgb
          { valinp_trace_0_thickness = new Fl_Value_Input(50, 65, 30, 25);
            valinp_trace_0_thickness->box(FL_BORDER_BOX);
            valinp_trace_0_thickness->maximum(100);
            valinp_trace_0_thickness->value(70);
            valinp_trace_0_thickness->callback((Fl_Callback*)cb_valinp_trace_0_thickness);
          } // Fl_Value_Input* valinp_trace_0_thickness
          { scrbar_trace_0_thickness = new Fl_Scrollbar(82, 67, 115, 20);
            scrbar_trace_0_thickness->type(1);
            scrbar_trace_0_thickness->box(FL_BORDER_BOX);
            scrbar_trace_0_thickness->maximum(100);
            scrbar_trace_0_thickness->Fl_Slider::value(70);
            scrbar_trace_0_thickness->callback((Fl_Callback*)cb_scrbar_trace_0_thickness);
            scrbar_trace_0_thickness->linesize(1);
          } // Fl_Scrollbar* scrbar_trace_0_thickness
          { button_trace_0_hue_min = new Fl_Button(250, 65, 15, 25, "...");
            button_trace_0_hue_min->callback((Fl_Callback*)cb_button_trace_0_hue_min);
            button_trace_0_hue_min->hide();
          } // Fl_Button* button_trace_0_hue_min
          { valinp_trace_0_hue_min = new Fl_Value_Input(265, 65, 35, 25);
            valinp_trace_0_hue_min->box(FL_BORDER_BOX);
            valinp_trace_0_hue_min->maximum(360);
            valinp_trace_0_hue_min->value(-1);
            valinp_trace_0_hue_min->callback((Fl_Callback*)cb_valinp_trace_0_hue_min);
            valinp_trace_0_hue_min->hide();
          } // Fl_Value_Input* valinp_trace_0_hue_min
          { valinp_trace_0_hue_max = new Fl_Value_Input(300, 65, 35, 25);
            valinp_trace_0_hue_max->box(FL_BORDER_BOX);
            valinp_trace_0_hue_max->maximum(360);
            valinp_trace_0_hue_max->value(-1);
            valinp_trace_0_hue_max->callback((Fl_Callback*)cb_valinp_trace_0_hue_max);
            valinp_trace_0_hue_max->hide();
          } // Fl_Value_Input* valinp_trace_0_hue_max
          { button_trace_0_hue_minmax = new Fl_Button(335, 65, 15, 25, "...");
            button_trace_0_hue_minmax->callback((Fl_Callback*)cb_button_trace_0_hue_minmax);
            button_trace_0_hue_minmax->hide();
          } // Fl_Button* button_trace_0_hue_minmax
          { chebut_trace_0_rotate360_sw = new Fl_Check_Button(350, 65, 15, 25);
            chebut_trace_0_rotate360_sw->down_box(FL_DOWN_BOX);
            chebut_trace_0_rotate360_sw->callback((Fl_Callback*)cb_chebut_trace_0_rotate360_sw);
            chebut_trace_0_rotate360_sw->hide();
          } // Fl_Check_Button* chebut_trace_0_rotate360_sw
          { chebut_trace_0_display_sw = new Fl_Check_Button(365, 65, 17, 25);
            chebut_trace_0_display_sw->down_box(FL_DOWN_BOX);
            chebut_trace_0_display_sw->callback((Fl_Callback*)cb_chebut_trace_0_display_sw);
          } // Fl_Check_Button* chebut_trace_0_display_sw
          { valinp_trace_0_slope_deg = new Fl_Value_Input(390, 65, 30, 25);
            valinp_trace_0_slope_deg->box(FL_BORDER_BOX);
            valinp_trace_0_slope_deg->maximum(90);
            valinp_trace_0_slope_deg->value(45);
            valinp_trace_0_slope_deg->callback((Fl_Callback*)cb_valinp_trace_0_slope_deg);
          } // Fl_Value_Input* valinp_trace_0_slope_deg
          { valinp_trace_0_intercept = new Fl_Value_Input(425, 65, 35, 25);
            valinp_trace_0_intercept->box(FL_BORDER_BOX);
            valinp_trace_0_intercept->maximum(100);
            valinp_trace_0_intercept->value(100);
            valinp_trace_0_intercept->callback((Fl_Callback*)cb_valinp_trace_0_intercept);
          } // Fl_Value_Input* valinp_trace_0_intercept
          group_trace_0->end();
        } // Fl_Group* group_trace_0
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 95, 465, 25);
        { chebut_trace_1_enable_sw = new Fl_Check_Button(2, 95, 17, 25);
          chebut_trace_1_enable_sw->down_box(FL_DOWN_BOX);
          chebut_trace_1_enable_sw->value(1);
          chebut_trace_1_enable_sw->callback((Fl_Callback*)cb_chebut_trace_1_enable_sw);
          chebut_trace_1_enable_sw->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* chebut_trace_1_enable_sw
        { group_trace_1 = new Fl_Group(0, 95, 465, 25);
          { button_trace_1_target_rgb = new Fl_Button(23, 95, 25, 25);
            button_trace_1_target_rgb->color((Fl_Color)17);
            button_trace_1_target_rgb->callback((Fl_Callback*)cb_button_trace_1_target_rgb);
          } // Fl_Button* button_trace_1_target_rgb
          { valinp_trace_1_thickness = new Fl_Value_Input(50, 95, 30, 25);
            valinp_trace_1_thickness->box(FL_BORDER_BOX);
            valinp_trace_1_thickness->maximum(100);
            valinp_trace_1_thickness->value(70);
            valinp_trace_1_thickness->callback((Fl_Callback*)cb_valinp_trace_1_thickness);
          } // Fl_Value_Input* valinp_trace_1_thickness
          { scrbar_trace_1_thickness = new Fl_Scrollbar(82, 97, 115, 20);
            scrbar_trace_1_thickness->type(1);
            scrbar_trace_1_thickness->box(FL_BORDER_BOX);
            scrbar_trace_1_thickness->maximum(100);
            scrbar_trace_1_thickness->Fl_Slider::value(70);
            scrbar_trace_1_thickness->callback((Fl_Callback*)cb_scrbar_trace_1_thickness);
            scrbar_trace_1_thickness->linesize(1);
          } // Fl_Scrollbar* scrbar_trace_1_thickness
          { button_trace_1_hue_min = new Fl_Button(250, 95, 15, 25, "...");
            button_trace_1_hue_min->callback((Fl_Callback*)cb_button_trace_1_hue_min);
            button_trace_1_hue_min->hide();
          } // Fl_Button* button_trace_1_hue_min
          { valinp_trace_1_hue_min = new Fl_Value_Input(265, 95, 35, 25);
            valinp_trace_1_hue_min->box(FL_BORDER_BOX);
            valinp_trace_1_hue_min->maximum(360);
            valinp_trace_1_hue_min->value(300);
            valinp_trace_1_hue_min->callback((Fl_Callback*)cb_valinp_trace_1_hue_min);
          } // Fl_Value_Input* valinp_trace_1_hue_min
          { valinp_trace_1_hue_max = new Fl_Value_Input(300, 95, 35, 25);
            valinp_trace_1_hue_max->box(FL_BORDER_BOX);
            valinp_trace_1_hue_max->maximum(360);
            valinp_trace_1_hue_max->value(60);
            valinp_trace_1_hue_max->callback((Fl_Callback*)cb_valinp_trace_1_hue_max);
          } // Fl_Value_Input* valinp_trace_1_hue_max
          { button_trace_1_hue_minmax = new Fl_Button(335, 95, 15, 25, "...");
            button_trace_1_hue_minmax->callback((Fl_Callback*)cb_button_trace_1_hue_minmax);
          } // Fl_Button* button_trace_1_hue_minmax
          { chebut_trace_1_rotate360_sw = new Fl_Check_Button(350, 95, 15, 25);
            chebut_trace_1_rotate360_sw->down_box(FL_DOWN_BOX);
            chebut_trace_1_rotate360_sw->callback((Fl_Callback*)cb_chebut_trace_1_rotate360_sw);
            chebut_trace_1_rotate360_sw->hide();
          } // Fl_Check_Button* chebut_trace_1_rotate360_sw
          { chebut_trace_1_display_sw = new Fl_Check_Button(365, 95, 17, 25);
            chebut_trace_1_display_sw->down_box(FL_DOWN_BOX);
            chebut_trace_1_display_sw->callback((Fl_Callback*)cb_chebut_trace_1_display_sw);
          } // Fl_Check_Button* chebut_trace_1_display_sw
          { valinp_trace_1_slope_deg = new Fl_Value_Input(390, 95, 30, 25);
            valinp_trace_1_slope_deg->box(FL_BORDER_BOX);
            valinp_trace_1_slope_deg->maximum(90);
            valinp_trace_1_slope_deg->value(45);
            valinp_trace_1_slope_deg->callback((Fl_Callback*)cb_valinp_trace_1_slope_deg);
          } // Fl_Value_Input* valinp_trace_1_slope_deg
          { valinp_trace_1_intercept = new Fl_Value_Input(425, 95, 35, 25);
            valinp_trace_1_intercept->box(FL_BORDER_BOX);
            valinp_trace_1_intercept->maximum(100);
            valinp_trace_1_intercept->value(100);
            valinp_trace_1_intercept->callback((Fl_Callback*)cb_valinp_trace_1_intercept);
          } // Fl_Value_Input* valinp_trace_1_intercept
          group_trace_1->end();
        } // Fl_Group* group_trace_1
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 125, 465, 25);
        { chebut_trace_2_enable_sw = new Fl_Check_Button(2, 125, 17, 25);
          chebut_trace_2_enable_sw->down_box(FL_DOWN_BOX);
          chebut_trace_2_enable_sw->value(1);
          chebut_trace_2_enable_sw->callback((Fl_Callback*)cb_chebut_trace_2_enable_sw);
          chebut_trace_2_enable_sw->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* chebut_trace_2_enable_sw
        { group_trace_2 = new Fl_Group(0, 125, 465, 25);
          { button_trace_2_target_rgb = new Fl_Button(23, 125, 25, 25);
            button_trace_2_target_rgb->color((Fl_Color)18);
            button_trace_2_target_rgb->callback((Fl_Callback*)cb_button_trace_2_target_rgb);
          } // Fl_Button* button_trace_2_target_rgb
          { valinp_trace_2_thickness = new Fl_Value_Input(50, 125, 30, 25);
            valinp_trace_2_thickness->box(FL_BORDER_BOX);
            valinp_trace_2_thickness->maximum(100);
            valinp_trace_2_thickness->value(70);
            valinp_trace_2_thickness->callback((Fl_Callback*)cb_valinp_trace_2_thickness);
          } // Fl_Value_Input* valinp_trace_2_thickness
          { scrbar_trace_2_thickness = new Fl_Scrollbar(82, 127, 115, 20);
            scrbar_trace_2_thickness->type(1);
            scrbar_trace_2_thickness->box(FL_BORDER_BOX);
            scrbar_trace_2_thickness->maximum(100);
            scrbar_trace_2_thickness->Fl_Slider::value(70);
            scrbar_trace_2_thickness->callback((Fl_Callback*)cb_scrbar_trace_2_thickness);
            scrbar_trace_2_thickness->linesize(1);
          } // Fl_Scrollbar* scrbar_trace_2_thickness
          { button_trace_2_hue_min = new Fl_Button(250, 125, 15, 25, "...");
            button_trace_2_hue_min->callback((Fl_Callback*)cb_button_trace_2_hue_min);
            button_trace_2_hue_min->hide();
          } // Fl_Button* button_trace_2_hue_min
          { valinp_trace_2_hue_min = new Fl_Value_Input(265, 125, 35, 25);
            valinp_trace_2_hue_min->box(FL_BORDER_BOX);
            valinp_trace_2_hue_min->maximum(360);
            valinp_trace_2_hue_min->value(180);
            valinp_trace_2_hue_min->callback((Fl_Callback*)cb_valinp_trace_2_hue_min);
          } // Fl_Value_Input* valinp_trace_2_hue_min
          { valinp_trace_2_hue_max = new Fl_Value_Input(300, 125, 35, 25);
            valinp_trace_2_hue_max->box(FL_BORDER_BOX);
            valinp_trace_2_hue_max->maximum(360);
            valinp_trace_2_hue_max->value(300);
            valinp_trace_2_hue_max->callback((Fl_Callback*)cb_valinp_trace_2_hue_max);
          } // Fl_Value_Input* valinp_trace_2_hue_max
          { button_trace_2_hue_minmax = new Fl_Button(335, 125, 15, 25, "...");
            button_trace_2_hue_minmax->callback((Fl_Callback*)cb_button_trace_2_hue_minmax);
          } // Fl_Button* button_trace_2_hue_minmax
          { chebut_trace_2_rotate360_sw = new Fl_Check_Button(350, 125, 15, 25);
            chebut_trace_2_rotate360_sw->down_box(FL_DOWN_BOX);
            chebut_trace_2_rotate360_sw->callback((Fl_Callback*)cb_chebut_trace_2_rotate360_sw);
            chebut_trace_2_rotate360_sw->hide();
          } // Fl_Check_Button* chebut_trace_2_rotate360_sw
          { chebut_trace_2_display_sw = new Fl_Check_Button(365, 125, 17, 25);
            chebut_trace_2_display_sw->down_box(FL_DOWN_BOX);
            chebut_trace_2_display_sw->callback((Fl_Callback*)cb_chebut_trace_2_display_sw);
          } // Fl_Check_Button* chebut_trace_2_display_sw
          { valinp_trace_2_slope_deg = new Fl_Value_Input(390, 125, 30, 25);
            valinp_trace_2_slope_deg->box(FL_BORDER_BOX);
            valinp_trace_2_slope_deg->maximum(90);
            valinp_trace_2_slope_deg->value(45);
            valinp_trace_2_slope_deg->callback((Fl_Callback*)cb_valinp_trace_2_slope_deg);
          } // Fl_Value_Input* valinp_trace_2_slope_deg
          { valinp_trace_2_intercept = new Fl_Value_Input(425, 125, 35, 25);
            valinp_trace_2_intercept->box(FL_BORDER_BOX);
            valinp_trace_2_intercept->maximum(100);
            valinp_trace_2_intercept->value(100);
            valinp_trace_2_intercept->callback((Fl_Callback*)cb_valinp_trace_2_intercept);
          } // Fl_Value_Input* valinp_trace_2_intercept
          group_trace_2->end();
        } // Fl_Group* group_trace_2
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 155, 465, 25);
        { chebut_trace_3_enable_sw = new Fl_Check_Button(2, 155, 17, 25);
          chebut_trace_3_enable_sw->down_box(FL_DOWN_BOX);
          chebut_trace_3_enable_sw->value(1);
          chebut_trace_3_enable_sw->callback((Fl_Callback*)cb_chebut_trace_3_enable_sw);
          chebut_trace_3_enable_sw->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* chebut_trace_3_enable_sw
        { group_trace_3 = new Fl_Group(0, 155, 465, 25);
          { button_trace_3_target_rgb = new Fl_Button(23, 155, 25, 25);
            button_trace_3_target_rgb->color((Fl_Color)19);
            button_trace_3_target_rgb->callback((Fl_Callback*)cb_button_trace_3_target_rgb);
          } // Fl_Button* button_trace_3_target_rgb
          { valinp_trace_3_thickness = new Fl_Value_Input(50, 155, 30, 25);
            valinp_trace_3_thickness->box(FL_BORDER_BOX);
            valinp_trace_3_thickness->maximum(100);
            valinp_trace_3_thickness->value(70);
            valinp_trace_3_thickness->callback((Fl_Callback*)cb_valinp_trace_3_thickness);
          } // Fl_Value_Input* valinp_trace_3_thickness
          { scrbar_trace_3_thickness = new Fl_Scrollbar(82, 157, 115, 20);
            scrbar_trace_3_thickness->type(1);
            scrbar_trace_3_thickness->box(FL_BORDER_BOX);
            scrbar_trace_3_thickness->maximum(100);
            scrbar_trace_3_thickness->Fl_Slider::value(70);
            scrbar_trace_3_thickness->callback((Fl_Callback*)cb_scrbar_trace_3_thickness);
            scrbar_trace_3_thickness->linesize(1);
          } // Fl_Scrollbar* scrbar_trace_3_thickness
          { button_trace_3_hue_min = new Fl_Button(250, 155, 15, 25, "...");
            button_trace_3_hue_min->callback((Fl_Callback*)cb_button_trace_3_hue_min);
            button_trace_3_hue_min->hide();
          } // Fl_Button* button_trace_3_hue_min
          { valinp_trace_3_hue_min = new Fl_Value_Input(265, 155, 35, 25);
            valinp_trace_3_hue_min->box(FL_BORDER_BOX);
            valinp_trace_3_hue_min->maximum(360);
            valinp_trace_3_hue_min->value(60);
            valinp_trace_3_hue_min->callback((Fl_Callback*)cb_valinp_trace_3_hue_min);
          } // Fl_Value_Input* valinp_trace_3_hue_min
          { valinp_trace_3_hue_max = new Fl_Value_Input(300, 155, 35, 25);
            valinp_trace_3_hue_max->box(FL_BORDER_BOX);
            valinp_trace_3_hue_max->maximum(360);
            valinp_trace_3_hue_max->value(180);
            valinp_trace_3_hue_max->callback((Fl_Callback*)cb_valinp_trace_3_hue_max);
          } // Fl_Value_Input* valinp_trace_3_hue_max
          { button_trace_3_hue_minmax = new Fl_Button(335, 155, 15, 25, "...");
            button_trace_3_hue_minmax->callback((Fl_Callback*)cb_button_trace_3_hue_minmax);
          } // Fl_Button* button_trace_3_hue_minmax
          { chebut_trace_3_rotate360_sw = new Fl_Check_Button(350, 155, 15, 25);
            chebut_trace_3_rotate360_sw->down_box(FL_DOWN_BOX);
            chebut_trace_3_rotate360_sw->callback((Fl_Callback*)cb_chebut_trace_3_rotate360_sw);
            chebut_trace_3_rotate360_sw->hide();
          } // Fl_Check_Button* chebut_trace_3_rotate360_sw
          { chebut_trace_3_display_sw = new Fl_Check_Button(365, 155, 17, 25);
            chebut_trace_3_display_sw->down_box(FL_DOWN_BOX);
            chebut_trace_3_display_sw->callback((Fl_Callback*)cb_chebut_trace_3_display_sw);
          } // Fl_Check_Button* chebut_trace_3_display_sw
          { valinp_trace_3_slope_deg = new Fl_Value_Input(390, 155, 30, 25);
            valinp_trace_3_slope_deg->box(FL_BORDER_BOX);
            valinp_trace_3_slope_deg->maximum(90);
            valinp_trace_3_slope_deg->value(45);
            valinp_trace_3_slope_deg->callback((Fl_Callback*)cb_valinp_trace_3_slope_deg);
          } // Fl_Value_Input* valinp_trace_3_slope_deg
          { valinp_trace_3_intercept = new Fl_Value_Input(425, 155, 35, 25);
            valinp_trace_3_intercept->box(FL_BORDER_BOX);
            valinp_trace_3_intercept->maximum(100);
            valinp_trace_3_intercept->value(100);
            valinp_trace_3_intercept->callback((Fl_Callback*)cb_valinp_trace_3_intercept);
          } // Fl_Value_Input* valinp_trace_3_intercept
          group_trace_3->end();
        } // Fl_Group* group_trace_3
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 185, 465, 25);
        { chebut_trace_4_enable_sw = new Fl_Check_Button(2, 185, 17, 25);
          chebut_trace_4_enable_sw->down_box(FL_DOWN_BOX);
          chebut_trace_4_enable_sw->callback((Fl_Callback*)cb_chebut_trace_4_enable_sw);
          chebut_trace_4_enable_sw->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* chebut_trace_4_enable_sw
        { group_trace_4 = new Fl_Group(0, 185, 465, 25);
          group_trace_4->deactivate();
          { button_trace_4_target_rgb = new Fl_Button(23, 185, 25, 25);
            button_trace_4_target_rgb->color((Fl_Color)20);
            button_trace_4_target_rgb->callback((Fl_Callback*)cb_button_trace_4_target_rgb);
          } // Fl_Button* button_trace_4_target_rgb
          { valinp_trace_4_thickness = new Fl_Value_Input(50, 185, 30, 25);
            valinp_trace_4_thickness->box(FL_BORDER_BOX);
            valinp_trace_4_thickness->maximum(100);
            valinp_trace_4_thickness->value(70);
            valinp_trace_4_thickness->callback((Fl_Callback*)cb_valinp_trace_4_thickness);
          } // Fl_Value_Input* valinp_trace_4_thickness
          { scrbar_trace_4_thickness = new Fl_Scrollbar(82, 187, 115, 20);
            scrbar_trace_4_thickness->type(1);
            scrbar_trace_4_thickness->box(FL_BORDER_BOX);
            scrbar_trace_4_thickness->maximum(100);
            scrbar_trace_4_thickness->Fl_Slider::value(70);
            scrbar_trace_4_thickness->callback((Fl_Callback*)cb_scrbar_trace_4_thickness);
            scrbar_trace_4_thickness->linesize(1);
          } // Fl_Scrollbar* scrbar_trace_4_thickness
          { button_trace_4_hue_min = new Fl_Button(250, 185, 15, 25, "...");
            button_trace_4_hue_min->callback((Fl_Callback*)cb_button_trace_4_hue_min);
            button_trace_4_hue_min->hide();
          } // Fl_Button* button_trace_4_hue_min
          { valinp_trace_4_hue_min = new Fl_Value_Input(265, 185, 35, 25);
            valinp_trace_4_hue_min->box(FL_BORDER_BOX);
            valinp_trace_4_hue_min->maximum(360);
            valinp_trace_4_hue_min->value(180);
            valinp_trace_4_hue_min->callback((Fl_Callback*)cb_valinp_trace_4_hue_min);
          } // Fl_Value_Input* valinp_trace_4_hue_min
          { valinp_trace_4_hue_max = new Fl_Value_Input(300, 185, 35, 25);
            valinp_trace_4_hue_max->box(FL_BORDER_BOX);
            valinp_trace_4_hue_max->maximum(360);
            valinp_trace_4_hue_max->value(180);
            valinp_trace_4_hue_max->callback((Fl_Callback*)cb_valinp_trace_4_hue_max);
          } // Fl_Value_Input* valinp_trace_4_hue_max
          { button_trace_4_hue_minmax = new Fl_Button(335, 185, 15, 25, "...");
            button_trace_4_hue_minmax->callback((Fl_Callback*)cb_button_trace_4_hue_minmax);
          } // Fl_Button* button_trace_4_hue_minmax
          { chebut_trace_4_rotate360_sw = new Fl_Check_Button(350, 185, 17, 25);
            chebut_trace_4_rotate360_sw->down_box(FL_DOWN_BOX);
            chebut_trace_4_rotate360_sw->callback((Fl_Callback*)cb_chebut_trace_4_rotate360_sw);
            chebut_trace_4_rotate360_sw->hide();
          } // Fl_Check_Button* chebut_trace_4_rotate360_sw
          { chebut_trace_4_display_sw = new Fl_Check_Button(365, 185, 17, 25);
            chebut_trace_4_display_sw->down_box(FL_DOWN_BOX);
            chebut_trace_4_display_sw->callback((Fl_Callback*)cb_chebut_trace_4_display_sw);
          } // Fl_Check_Button* chebut_trace_4_display_sw
          { valinp_trace_4_slope_deg = new Fl_Value_Input(390, 185, 30, 25);
            valinp_trace_4_slope_deg->box(FL_BORDER_BOX);
            valinp_trace_4_slope_deg->maximum(90);
            valinp_trace_4_slope_deg->value(45);
            valinp_trace_4_slope_deg->callback((Fl_Callback*)cb_valinp_trace_4_slope_deg);
          } // Fl_Value_Input* valinp_trace_4_slope_deg
          { valinp_trace_4_intercept = new Fl_Value_Input(425, 185, 35, 25);
            valinp_trace_4_intercept->box(FL_BORDER_BOX);
            valinp_trace_4_intercept->maximum(100);
            valinp_trace_4_intercept->value(100);
            valinp_trace_4_intercept->callback((Fl_Callback*)cb_valinp_trace_4_intercept);
          } // Fl_Value_Input* valinp_trace_4_intercept
          group_trace_4->end();
        } // Fl_Group* group_trace_4
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 215, 465, 25);
        { chebut_trace_5_enable_sw = new Fl_Check_Button(2, 215, 17, 25);
          chebut_trace_5_enable_sw->down_box(FL_DOWN_BOX);
          chebut_trace_5_enable_sw->callback((Fl_Callback*)cb_chebut_trace_5_enable_sw);
          chebut_trace_5_enable_sw->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* chebut_trace_5_enable_sw
        { group_trace_5 = new Fl_Group(0, 215, 465, 25);
          group_trace_5->deactivate();
          { button_trace_5_target_rgb = new Fl_Button(23, 215, 25, 25);
            button_trace_5_target_rgb->color((Fl_Color)21);
            button_trace_5_target_rgb->callback((Fl_Callback*)cb_button_trace_5_target_rgb);
          } // Fl_Button* button_trace_5_target_rgb
          { valinp_trace_5_thickness = new Fl_Value_Input(50, 215, 30, 25);
            valinp_trace_5_thickness->box(FL_BORDER_BOX);
            valinp_trace_5_thickness->maximum(100);
            valinp_trace_5_thickness->value(70);
            valinp_trace_5_thickness->callback((Fl_Callback*)cb_valinp_trace_5_thickness);
          } // Fl_Value_Input* valinp_trace_5_thickness
          { scrbar_trace_5_thickness = new Fl_Scrollbar(82, 217, 115, 20);
            scrbar_trace_5_thickness->type(1);
            scrbar_trace_5_thickness->box(FL_BORDER_BOX);
            scrbar_trace_5_thickness->maximum(100);
            scrbar_trace_5_thickness->Fl_Slider::value(70);
            scrbar_trace_5_thickness->callback((Fl_Callback*)cb_scrbar_trace_5_thickness);
            scrbar_trace_5_thickness->linesize(1);
          } // Fl_Scrollbar* scrbar_trace_5_thickness
          { button_trace_5_hue_min = new Fl_Button(250, 215, 15, 25, "...");
            button_trace_5_hue_min->callback((Fl_Callback*)cb_button_trace_5_hue_min);
            button_trace_5_hue_min->hide();
          } // Fl_Button* button_trace_5_hue_min
          { valinp_trace_5_hue_min = new Fl_Value_Input(265, 215, 35, 25);
            valinp_trace_5_hue_min->box(FL_BORDER_BOX);
            valinp_trace_5_hue_min->maximum(360);
            valinp_trace_5_hue_min->value(300);
            valinp_trace_5_hue_min->callback((Fl_Callback*)cb_valinp_trace_5_hue_min);
          } // Fl_Value_Input* valinp_trace_5_hue_min
          { valinp_trace_5_hue_max = new Fl_Value_Input(300, 215, 35, 25);
            valinp_trace_5_hue_max->box(FL_BORDER_BOX);
            valinp_trace_5_hue_max->maximum(360);
            valinp_trace_5_hue_max->value(300);
            valinp_trace_5_hue_max->callback((Fl_Callback*)cb_valinp_trace_5_hue_max);
          } // Fl_Value_Input* valinp_trace_5_hue_max
          { button_trace_5_hue_minmax = new Fl_Button(335, 215, 15, 25, "...");
            button_trace_5_hue_minmax->callback((Fl_Callback*)cb_button_trace_5_hue_minmax);
          } // Fl_Button* button_trace_5_hue_minmax
          { chebut_trace_5_rotate360_sw = new Fl_Check_Button(350, 215, 17, 25);
            chebut_trace_5_rotate360_sw->down_box(FL_DOWN_BOX);
            chebut_trace_5_rotate360_sw->callback((Fl_Callback*)cb_chebut_trace_5_rotate360_sw);
            chebut_trace_5_rotate360_sw->hide();
          } // Fl_Check_Button* chebut_trace_5_rotate360_sw
          { chebut_trace_5_display_sw = new Fl_Check_Button(365, 215, 17, 25);
            chebut_trace_5_display_sw->down_box(FL_DOWN_BOX);
            chebut_trace_5_display_sw->callback((Fl_Callback*)cb_chebut_trace_5_display_sw);
          } // Fl_Check_Button* chebut_trace_5_display_sw
          { valinp_trace_5_slope_deg = new Fl_Value_Input(390, 215, 30, 25);
            valinp_trace_5_slope_deg->box(FL_BORDER_BOX);
            valinp_trace_5_slope_deg->maximum(90);
            valinp_trace_5_slope_deg->value(45);
            valinp_trace_5_slope_deg->callback((Fl_Callback*)cb_valinp_trace_5_slope_deg);
          } // Fl_Value_Input* valinp_trace_5_slope_deg
          { valinp_trace_5_intercept = new Fl_Value_Input(425, 215, 35, 25);
            valinp_trace_5_intercept->box(FL_BORDER_BOX);
            valinp_trace_5_intercept->maximum(100);
            valinp_trace_5_intercept->value(100);
            valinp_trace_5_intercept->callback((Fl_Callback*)cb_valinp_trace_5_intercept);
          } // Fl_Value_Input* valinp_trace_5_intercept
          group_trace_5->end();
        } // Fl_Group* group_trace_5
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(225, 80, 15, 145);
        { button_change_0_1 = new Fl_Button(225, 80, 15, 25);
          button_change_0_1->image( image_icon_change_updown() );
          button_change_0_1->callback((Fl_Callback*)cb_button_change_0_1);
        } // Fl_Button* button_change_0_1
        { button_change_1_2 = new Fl_Button(225, 110, 15, 25);
          button_change_1_2->image( image_icon_change_updown() );
          button_change_1_2->callback((Fl_Callback*)cb_button_change_1_2);
        } // Fl_Button* button_change_1_2
        { button_change_2_3 = new Fl_Button(225, 140, 15, 25);
          button_change_2_3->image( image_icon_change_updown() );
          button_change_2_3->callback((Fl_Callback*)cb_button_change_2_3);
        } // Fl_Button* button_change_2_3
        { button_change_3_4 = new Fl_Button(225, 170, 15, 25);
          button_change_3_4->image( image_icon_change_updown() );
          button_change_3_4->callback((Fl_Callback*)cb_button_change_3_4);
        } // Fl_Button* button_change_3_4
        { button_change_4_5 = new Fl_Button(225, 200, 15, 25);
          button_change_4_5->image( image_icon_change_updown() );
          button_change_4_5->callback((Fl_Callback*)cb_button_change_4_5);
        } // Fl_Button* button_change_4_5
        o->end();
      } // Fl_Group* o
      group_trace_params->end();
    } // Fl_Group* group_trace_params
    window_trace_params->set_non_modal();
    window_trace_params->end();
  } // Fl_Double_Window* window_trace_params
  { window_trace_hsv_view = new Fl_Double_Window(500, 500, "2\345\200\244\345\214\226HSV\350\211\262\347\253\213\344\275\223");
    window_trace_hsv_view->callback((Fl_Callback*)cb_window_trace_hsv_view, (void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 500, 25);
      o->hide();
      o->menu(menu_2);
    } // Fl_Menu_Bar* o
    { hsv_view = new fl_gl_hsv_view(0, 0, 500, 500);
      hsv_view->box(FL_NO_BOX);
      hsv_view->color(FL_BACKGROUND_COLOR);
      hsv_view->selection_color(FL_BACKGROUND_COLOR);
      hsv_view->labeltype(FL_NORMAL_LABEL);
      hsv_view->labelfont(0);
      hsv_view->labelsize(14);
      hsv_view->labelcolor(FL_FOREGROUND_COLOR);
      hsv_view->align(Fl_Align(FL_ALIGN_CENTER));
      hsv_view->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(hsv_view);
    } // fl_gl_hsv_view* hsv_view
    window_trace_hsv_view->set_non_modal();
    window_trace_hsv_view->end();
  } // Fl_Double_Window* window_trace_hsv_view
  { window_set_number_format = new Fl_Double_Window(200, 150, "\351\200\243\347\225\252\346\233\270\345\274\217");
    window_set_number_format->callback((Fl_Callback*)cb_window_set_number_format, (void*)(this));
    { choice_input_num_form_separator = new Fl_Choice(80, 10, 105, 25, "\345\214\272\345\210\207");
      choice_input_num_form_separator->box(FL_BORDER_BOX);
      choice_input_num_form_separator->down_box(FL_BORDER_BOX);
      choice_input_num_form_separator->callback((Fl_Callback*)cb_choice_input_num_form_separator);
    } // Fl_Choice* choice_input_num_form_separator
    { counte_input_num_form_num_of_digits = new Fl_Counter(120, 40, 65, 25, "\346\241\201\346\225\260");
      counte_input_num_form_num_of_digits->type(1);
      counte_input_num_form_num_of_digits->box(FL_BORDER_BOX);
      counte_input_num_form_num_of_digits->minimum(2);
      counte_input_num_form_num_of_digits->maximum(4);
      counte_input_num_form_num_of_digits->step(1);
      counte_input_num_form_num_of_digits->callback((Fl_Callback*)cb_counte_input_num_form_num_of_digits);
      counte_input_num_form_num_of_digits->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Counter* counte_input_num_form_num_of_digits
    { output_input_num_form_sample = new Fl_Output(60, 80, 80, 25);
      output_input_num_form_sample->box(FL_BORDER_BOX);
    } // Fl_Output* output_input_num_form_sample
    { Fl_Button* o = new Fl_Button(20, 115, 60, 25, "\343\202\273\343\203\203\343\203\210");
      o->callback((Fl_Callback*)cb_23);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(120, 115, 60, 25, "\343\202\255\343\203\243\343\203\263\343\202\273\343\203\253");
      o->callback((Fl_Callback*)cb_24);
    } // Fl_Button* o
    window_set_number_format->set_modal();
    window_set_number_format->end();
  } // Fl_Double_Window* window_set_number_format
  { window_set_aspect_ratio = new Fl_Double_Window(160, 90, "\347\270\246\346\250\252\346\257\224");
    window_set_aspect_ratio->callback((Fl_Callback*)cb_window_set_aspect_ratio, (void*)(this));
    { Fl_Group* o = new Fl_Group(0, 15, 150, 25);
      { radbut_area_aspect_ratio_w = new Fl_Button(10, 15, 15, 25, "\345\271\205");
        radbut_area_aspect_ratio_w->type(102);
        radbut_area_aspect_ratio_w->value(1);
      } // Fl_Button* radbut_area_aspect_ratio_w
      { valinp_area_aspect_ratio_w = new Fl_Value_Input(25, 15, 55, 25);
        valinp_area_aspect_ratio_w->box(FL_BORDER_BOX);
        valinp_area_aspect_ratio_w->value(16);
      } // Fl_Value_Input* valinp_area_aspect_ratio_w
      { radbut_area_aspect_ratio_h = new Fl_Button(80, 15, 15, 25, "\351\253\230");
        radbut_area_aspect_ratio_h->type(102);
      } // Fl_Button* radbut_area_aspect_ratio_h
      { valinp_area_aspect_ratio_h = new Fl_Value_Input(95, 15, 55, 25);
        valinp_area_aspect_ratio_h->box(FL_BORDER_BOX);
        valinp_area_aspect_ratio_h->value(9);
      } // Fl_Value_Input* valinp_area_aspect_ratio_h
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(15, 55, 60, 25, "\343\202\273\343\203\203\343\203\210");
      o->callback((Fl_Callback*)cb_25);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(85, 55, 60, 25, "\343\202\255\343\203\243\343\203\263\343\202\273\343\203\253");
      o->callback((Fl_Callback*)cb_26);
    } // Fl_Button* o
    window_set_aspect_ratio->set_modal();
    window_set_aspect_ratio->end();
  } // Fl_Double_Window* window_set_aspect_ratio
  { window_set_color = new Fl_Double_Window(200, 205, "\350\211\262");
    window_set_color->callback((Fl_Callback*)cb_window_set_color, (void*)(this));
    { Fl_Group* o = new Fl_Group(0, 5, 200, 141);
      { Fl_Group* o = new Fl_Group(0, 5, 200, 20);
        { valinp_set_color_hue = new Fl_Value_Input(20, 5, 35, 18, "H");
          valinp_set_color_hue->box(FL_BORDER_BOX);
          valinp_set_color_hue->maximum(360);
          valinp_set_color_hue->callback((Fl_Callback*)cb_valinp_set_color_hue);
        } // Fl_Value_Input* valinp_set_color_hue
        { scrbar_set_color_hue = new Fl_Scrollbar(60, 5, 135, 18);
          scrbar_set_color_hue->type(1);
          scrbar_set_color_hue->box(FL_BORDER_BOX);
          scrbar_set_color_hue->maximum(360);
          scrbar_set_color_hue->callback((Fl_Callback*)cb_scrbar_set_color_hue);
          Fl_Group::current()->resizable(scrbar_set_color_hue);
          scrbar_set_color_hue->linesize(1);
        } // Fl_Scrollbar* scrbar_set_color_hue
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 28, 200, 20);
        { valinp_set_color_sat = new Fl_Value_Input(20, 28, 35, 18, "S");
          valinp_set_color_sat->box(FL_BORDER_BOX);
          valinp_set_color_sat->maximum(100);
          valinp_set_color_sat->callback((Fl_Callback*)cb_valinp_set_color_sat);
        } // Fl_Value_Input* valinp_set_color_sat
        { scrbar_set_color_sat = new Fl_Scrollbar(60, 28, 135, 18);
          scrbar_set_color_sat->type(1);
          scrbar_set_color_sat->box(FL_BORDER_BOX);
          scrbar_set_color_sat->maximum(100);
          scrbar_set_color_sat->callback((Fl_Callback*)cb_scrbar_set_color_sat);
          Fl_Group::current()->resizable(scrbar_set_color_sat);
          scrbar_set_color_sat->linesize(1);
        } // Fl_Scrollbar* scrbar_set_color_sat
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 51, 200, 20);
        { valinp_set_color_val = new Fl_Value_Input(20, 51, 35, 18, "V");
          valinp_set_color_val->box(FL_BORDER_BOX);
          valinp_set_color_val->maximum(100);
          valinp_set_color_val->callback((Fl_Callback*)cb_valinp_set_color_val);
        } // Fl_Value_Input* valinp_set_color_val
        { scrbar_set_color_val = new Fl_Scrollbar(60, 51, 135, 18);
          scrbar_set_color_val->type(1);
          scrbar_set_color_val->box(FL_BORDER_BOX);
          scrbar_set_color_val->maximum(100);
          scrbar_set_color_val->callback((Fl_Callback*)cb_scrbar_set_color_val);
          Fl_Group::current()->resizable(scrbar_set_color_val);
          scrbar_set_color_val->linesize(1);
        } // Fl_Scrollbar* scrbar_set_color_val
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 80, 200, 20);
        { valinp_set_color_red = new Fl_Value_Input(20, 80, 35, 18, "R");
          valinp_set_color_red->box(FL_BORDER_BOX);
          valinp_set_color_red->maximum(255);
          valinp_set_color_red->callback((Fl_Callback*)cb_valinp_set_color_red);
        } // Fl_Value_Input* valinp_set_color_red
        { scrbar_set_color_red = new Fl_Scrollbar(60, 80, 135, 18);
          scrbar_set_color_red->type(1);
          scrbar_set_color_red->box(FL_BORDER_BOX);
          scrbar_set_color_red->maximum(255);
          scrbar_set_color_red->callback((Fl_Callback*)cb_scrbar_set_color_red);
          Fl_Group::current()->resizable(scrbar_set_color_red);
          scrbar_set_color_red->linesize(1);
        } // Fl_Scrollbar* scrbar_set_color_red
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 103, 200, 20);
        { valinp_set_color_gre = new Fl_Value_Input(20, 103, 35, 18, "G");
          valinp_set_color_gre->box(FL_BORDER_BOX);
          valinp_set_color_gre->maximum(255);
          valinp_set_color_gre->callback((Fl_Callback*)cb_valinp_set_color_gre);
        } // Fl_Value_Input* valinp_set_color_gre
        { scrbar_set_color_gre = new Fl_Scrollbar(60, 103, 135, 18);
          scrbar_set_color_gre->type(1);
          scrbar_set_color_gre->box(FL_BORDER_BOX);
          scrbar_set_color_gre->maximum(255);
          scrbar_set_color_gre->callback((Fl_Callback*)cb_scrbar_set_color_gre);
          Fl_Group::current()->resizable(scrbar_set_color_gre);
          scrbar_set_color_gre->linesize(1);
        } // Fl_Scrollbar* scrbar_set_color_gre
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 126, 200, 20);
        { valinp_set_color_blu = new Fl_Value_Input(20, 126, 35, 18, "B");
          valinp_set_color_blu->box(FL_BORDER_BOX);
          valinp_set_color_blu->maximum(255);
          valinp_set_color_blu->callback((Fl_Callback*)cb_valinp_set_color_blu);
        } // Fl_Value_Input* valinp_set_color_blu
        { scrbar_set_color_blu = new Fl_Scrollbar(60, 126, 135, 18);
          scrbar_set_color_blu->type(1);
          scrbar_set_color_blu->box(FL_BORDER_BOX);
          scrbar_set_color_blu->maximum(255);
          scrbar_set_color_blu->callback((Fl_Callback*)cb_scrbar_set_color_blu);
          Fl_Group::current()->resizable(scrbar_set_color_blu);
          scrbar_set_color_blu->linesize(1);
        } // Fl_Scrollbar* scrbar_set_color_blu
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 150, 200, 50);
      { Fl_Box* o = new Fl_Box(0, 150, 65, 50);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { Fl_Group* o = new Fl_Group(65, 150, 130, 50);
        { box_set_color_ok = new Fl_Box(65, 150, 65, 20);
          box_set_color_ok->box(FL_FLAT_BOX);
        } // Fl_Box* box_set_color_ok
        { box_set_color_cancel = new Fl_Box(130, 150, 65, 20);
          box_set_color_cancel->box(FL_FLAT_BOX);
          box_set_color_cancel->color((Fl_Color)22);
        } // Fl_Box* box_set_color_cancel
        { Fl_Button* o = new Fl_Button(65, 175, 60, 25, "\343\202\273\343\203\203\343\203\210");
          o->callback((Fl_Callback*)cb_27);
        } // Fl_Button* o
        { Fl_Button* o = new Fl_Button(135, 175, 60, 25, "\343\202\255\343\203\243\343\203\263\343\202\273\343\203\253");
          o->callback((Fl_Callback*)cb_28);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    window_set_color->set_modal();
    window_set_color->size_range(200, 205, 1000, 205);
    window_set_color->end();
    window_set_color->resizable(window_set_color);
  } // Fl_Double_Window* window_set_color
  { window_trace_hue_minmax = new Fl_Double_Window(200, 70, "2\345\200\244\345\214\226\350\211\262\347\233\270\347\257\204\345\233\262");
    window_trace_hue_minmax->callback((Fl_Callback*)cb_window_trace_hue_minmax, (void*)(this));
    { Fl_Group* o = new Fl_Group(0, 0, 200, 40);
      { new Fl_Box(0, 0, 200, 5);
      } // Fl_Box* o
      { cyclic_color_wheel = new fl_gl_cyclic_color_wheel(0, 5, 200, 30);
        cyclic_color_wheel->box(FL_NO_BOX);
        cyclic_color_wheel->color(FL_BACKGROUND_COLOR);
        cyclic_color_wheel->selection_color(FL_BACKGROUND_COLOR);
        cyclic_color_wheel->labeltype(FL_NORMAL_LABEL);
        cyclic_color_wheel->labelfont(0);
        cyclic_color_wheel->labelsize(14);
        cyclic_color_wheel->labelcolor(FL_FOREGROUND_COLOR);
        cyclic_color_wheel->align(Fl_Align(FL_ALIGN_CENTER));
        cyclic_color_wheel->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(cyclic_color_wheel);
      } // fl_gl_cyclic_color_wheel* cyclic_color_wheel
      { new Fl_Box(0, 35, 200, 5);
      } // Fl_Box* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 40, 200, 30);
      { Fl_Group* o = new Fl_Group(0, 40, 75, 30);
        { radbut_hue_min_sw = new Fl_Button(5, 40, 35, 25, "\346\234\200\345\260\217");
          radbut_hue_min_sw->type(102);
          radbut_hue_min_sw->value(1);
          radbut_hue_min_sw->callback((Fl_Callback*)cb_radbut_hue_min_sw);
        } // Fl_Button* radbut_hue_min_sw
        { radbut_hue_max_sw = new Fl_Button(40, 40, 35, 25, "\346\234\200\345\244\247");
          radbut_hue_max_sw->type(102);
          radbut_hue_max_sw->callback((Fl_Callback*)cb_radbut_hue_max_sw);
        } // Fl_Button* radbut_hue_max_sw
        o->end();
      } // Fl_Group* o
      { Fl_Box* o = new Fl_Box(75, 40, 70, 25);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { Fl_Button* o = new Fl_Button(145, 40, 50, 25, "\343\203\252\343\202\273\343\203\203\343\203\210");
        o->callback((Fl_Callback*)cb_29);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    window_trace_hue_minmax->set_non_modal();
    window_trace_hue_minmax->size_range(200, 70, 1000, 100);
    window_trace_hue_minmax->end();
  } // Fl_Double_Window* window_trace_hue_minmax
  return window_trace_hue_minmax;
}
gts_gui cl_gts_gui; 
